
/*
 * This file was generated by the SOM Compiler.
 * FileName: car.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Car_xh
#define SOM_Car_xh

class Car;

#define Car_MajorVersion 0
#define Car_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Car_API
#define Car_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the Car Class */
class MetaCar;
SOMEXTERN MetaCar * SOMLINK CarNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Car class object, and the methods it introduces. */
SOMEXTERN struct CarClassDataStructure {
	MetaCar *classObject;
	somMToken _set_make;
	somMToken _get_make;
	somMToken _set_model;
	somMToken _get_model;
	somMToken _set_price;
	somMToken _get_price;
	somMToken printCarSpec;
} CarClassData;
#define _Car CarClassData.classObject

/* The API to parentMtabs for Car, and the instance data it introduces. */
SOMEXTERN struct CarCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} CarCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Car
 */
SOMEXTERN {
typedef string   (* SOMLINK somTD_Car__get_make)(Car *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Car__set_make)(Car *somSelf, Environment *ev,
		string make);
typedef string   (* SOMLINK somTD_Car__get_model)(Car *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Car__set_model)(Car *somSelf, Environment *ev,
		string model);
typedef long   (* SOMLINK somTD_Car__get_price)(Car *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Car__set_price)(Car *somSelf, Environment *ev,
		long price);
typedef void   (* SOMLINK somTD_Car_printCarSpec)(Car *somSelf, Environment *ev);
}

#endif /* Car_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Car
 */
class Car : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!CarClassData.classObject) 
      CarNewClass(Car_MajorVersion,Car_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(CarClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(CarClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somGetClass for this class to specialize the return type. */
MetaCar* somGetClass()
{
   return (MetaCar *) ((void *)(SOMObject::somGetClass()));
}

/* public method: _get_make */
string   _get_make(Environment *ev)
{
   return SOM_Resolve(this,Car,_get_make)
	(this,ev);
}


/* public method: _set_make */
void   _set_make(Environment *ev,
		string make)
{
   SOM_Resolve(this,Car,_set_make)
	(this,ev,make);
}


/* public method: _get_model */
string   _get_model(Environment *ev)
{
   return SOM_Resolve(this,Car,_get_model)
	(this,ev);
}


/* public method: _set_model */
void   _set_model(Environment *ev,
		string model)
{
   SOM_Resolve(this,Car,_set_model)
	(this,ev,model);
}


/* public method: _get_price */
long   _get_price(Environment *ev)
{
   return SOM_Resolve(this,Car,_get_price)
	(this,ev);
}


/* public method: _set_price */
void   _set_price(Environment *ev,
		long price)
{
   SOM_Resolve(this,Car,_set_price)
	(this,ev,price);
}


/* public method: printCarSpec */
void   printCarSpec(Environment *ev)
{
   SOM_Resolve(this,Car,printCarSpec)
	(this,ev);
}



};   /* Car */



/*
 * Type Independent (name lookup) Method Invocation Support
 */

#ifndef somLUM_printCarSpec
#define somLUM_printCarSpec
static char *somLMN_printCarSpec = "printCarSpec";
static somId somLId_printCarSpec = &somLMN_printCarSpec;
#define Car_lookup_printCarSpec(somSelf,ev) \
    ((( somTD_Car_printCarSpec ) \
	SOM_GetClass(somSelf)->somLookupMethod(somLId_printCarSpec)) \
	    ((Car*)somSelf,ev))
#define lookup_printCarSpec Car_lookup_printCarSpec
#endif


#endif       /* SOM_Car_xh */

#ifndef SOM_MetaCar_xh
#define SOM_MetaCar_xh

class MetaCar;

#define MetaCar_MajorVersion 0
#define MetaCar_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMClass_xh
#include <somcls.xh>
#endif

#ifndef MetaCar_API
#define MetaCar_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/*
 * -- MetaCar is a metaclass for Car. Make sure Car is known.
 */
class Car;


/* A procedure to create the MetaCar Class */
SOMEXTERN SOMClass * SOMLINK MetaCarNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the MetaCar class object, and the methods it introduces. */
SOMEXTERN struct MetaCarClassDataStructure {
	SOMClass *classObject;
	somMToken createCar;
} MetaCarClassData;
#define _MetaCar MetaCarClassData.classObject

/* The API to parentMtabs for MetaCar, and the instance data it introduces. */
SOMEXTERN struct MetaCarCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} MetaCarCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by MetaCar
 */
SOMEXTERN {
typedef Car*   (* SOMLINK somTD_MetaCar_createCar)(MetaCar *somSelf, Environment *ev,
		string make,
		string model,
		long price);
}

#endif /* MetaCar_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for MetaCar
 */
class MetaCar : public SOMClass
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!MetaCarClassData.classObject) 
      MetaCarNewClass(MetaCar_MajorVersion,MetaCar_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(MetaCarClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(MetaCarClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somNew for this Metaclass to specialize the return type. */
Car* somNew()
{
   return (Car *) ((void *)(SOMClass::somNew()));
}

/* public method: createCar */
Car*   createCar(Environment *ev,
		string make,
		string model,
		long price)
{
   return SOM_Resolve(this,MetaCar,createCar)
	(this,ev,make,model,price);
}



};   /* MetaCar */



#endif       /* SOM_MetaCar_xh */
