
/*
 * This file was generated by the SOM Compiler.
 * FileName: fly.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_FlyingObject_xh
#define SOM_FlyingObject_xh

class FlyingObject;

#define FlyingObject_MajorVersion 0
#define FlyingObject_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef FlyingObject_API
#define FlyingObject_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the FlyingObject Class */
class MetaFlyingObject;
SOMEXTERN MetaFlyingObject * SOMLINK FlyingObjectNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the FlyingObject class object, and the methods it introduces. */
SOMEXTERN struct FlyingObjectClassDataStructure {
	MetaFlyingObject *classObject;
	somMToken _get_speed;
	somMToken _set_speed;
} FlyingObjectClassData;
#define _FlyingObject FlyingObjectClassData.classObject

/* The API to parentMtabs for FlyingObject, and the instance data it introduces. */
SOMEXTERN struct FlyingObjectCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} FlyingObjectCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by FlyingObject
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_FlyingObject__get_speed)(FlyingObject *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_FlyingObject__set_speed)(FlyingObject *somSelf, Environment *ev,
		short speed);
}

#endif /* FlyingObject_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for FlyingObject
 */
class FlyingObject : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!FlyingObjectClassData.classObject) 
      FlyingObjectNewClass(FlyingObject_MajorVersion,FlyingObject_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(FlyingObjectClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(FlyingObjectClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somGetClass for this class to specialize the return type. */
MetaFlyingObject* somGetClass()
{
   return (MetaFlyingObject *) ((void *)(SOMObject::somGetClass()));
}

/* public method: _get_speed */
short   _get_speed(Environment *ev)
{
   return SOM_Resolve(this,FlyingObject,_get_speed)
	(this,ev);
}


/* public method: _set_speed */
void   _set_speed(Environment *ev,
		short speed)
{
   SOM_Resolve(this,FlyingObject,_set_speed)
	(this,ev,speed);
}



};   /* FlyingObject */



#endif       /* SOM_FlyingObject_xh */

#ifndef SOM_MetaFlyingObject_xh
#define SOM_MetaFlyingObject_xh

class MetaFlyingObject;

#define MetaFlyingObject_MajorVersion 0
#define MetaFlyingObject_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMClass_xh
#include <somcls.xh>
#endif

#ifndef MetaFlyingObject_API
#define MetaFlyingObject_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/*
 * -- MetaFlyingObject is a metaclass for FlyingObject. Make sure FlyingObject is known.
 */
class FlyingObject;


/* A procedure to create the MetaFlyingObject Class */
SOMEXTERN SOMClass * SOMLINK MetaFlyingObjectNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the MetaFlyingObject class object, and the methods it introduces. */
SOMEXTERN struct MetaFlyingObjectClassDataStructure {
	SOMClass *classObject;
	somMToken _get_count;
	somMToken createFlyingObject;
} MetaFlyingObjectClassData;
#define _MetaFlyingObject MetaFlyingObjectClassData.classObject

/* The API to parentMtabs for MetaFlyingObject, and the instance data it introduces. */
SOMEXTERN struct MetaFlyingObjectCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} MetaFlyingObjectCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by MetaFlyingObject
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_MetaFlyingObject__get_count)(MetaFlyingObject *somSelf, Environment *ev);
typedef FlyingObject*   (* SOMLINK somTD_MetaFlyingObject_createFlyingObject)(MetaFlyingObject *somSelf, Environment *ev,
		short speed);
}

#endif /* MetaFlyingObject_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for MetaFlyingObject
 */
class MetaFlyingObject : public SOMClass
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!MetaFlyingObjectClassData.classObject) 
      MetaFlyingObjectNewClass(MetaFlyingObject_MajorVersion,MetaFlyingObject_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(MetaFlyingObjectClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(MetaFlyingObjectClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somNew for this Metaclass to specialize the return type. */
FlyingObject* somNew()
{
   return (FlyingObject *) ((void *)(SOMClass::somNew()));
}

/* public method: _get_count */
short   _get_count(Environment *ev)
{
   return SOM_Resolve(this,MetaFlyingObject,_get_count)
	(this,ev);
}


/* public method: createFlyingObject */
FlyingObject*   createFlyingObject(Environment *ev,
		short speed)
{
   return SOM_Resolve(this,MetaFlyingObject,createFlyingObject)
	(this,ev,speed);
}



};   /* MetaFlyingObject */



#endif       /* SOM_MetaFlyingObject_xh */
