
/*
 * This file was generated by the SOM Compiler.
 * FileName: animal.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Animal_xh
#define SOM_Animal_xh

class Animal;

#define Animal_MajorVersion 0
#define Animal_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Animal_API
#define Animal_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the Animal Class */
class MetaAnimal;
SOMEXTERN MetaAnimal * SOMLINK AnimalNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Animal class object, and the methods it introduces. */
SOMEXTERN struct AnimalClassDataStructure {
	MetaAnimal *classObject;
	somMToken _get_name;
	somMToken _set_name;
	somMToken sleep;
} AnimalClassData;
#define _Animal AnimalClassData.classObject

/* The API to parentMtabs for Animal, and the instance data it introduces. */
SOMEXTERN struct AnimalCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} AnimalCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Animal
 */
SOMEXTERN {
typedef string   (* SOMLINK somTD_Animal__get_name)(Animal *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Animal__set_name)(Animal *somSelf, Environment *ev,
		string name);
typedef void   (* SOMLINK somTD_Animal_sleep)(Animal *somSelf, Environment *ev);
}

#endif /* Animal_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Animal
 */
class Animal : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!AnimalClassData.classObject) 
      AnimalNewClass(Animal_MajorVersion,Animal_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(AnimalClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(AnimalClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somGetClass for this class to specialize the return type. */
MetaAnimal* somGetClass()
{
   return (MetaAnimal *) ((void *)(SOMObject::somGetClass()));
}

/* public method: _get_name */
string   _get_name(Environment *ev)
{
   return SOM_Resolve(this,Animal,_get_name)
	(this,ev);
}


/* public method: _set_name */
void   _set_name(Environment *ev,
		string name)
{
   SOM_Resolve(this,Animal,_set_name)
	(this,ev,name);
}


/* public method: sleep */
void   sleep(Environment *ev)
{
   SOM_Resolve(this,Animal,sleep)
	(this,ev);
}



};   /* Animal */



#endif       /* SOM_Animal_xh */

#ifndef SOM_MetaAnimal_xh
#define SOM_MetaAnimal_xh

class MetaAnimal;

#define MetaAnimal_MajorVersion 0
#define MetaAnimal_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMClass_xh
#include <somcls.xh>
#endif

#ifndef MetaAnimal_API
#define MetaAnimal_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/*
 * -- MetaAnimal is a metaclass for Animal. Make sure Animal is known.
 */
class Animal;


/* A procedure to create the MetaAnimal Class */
SOMEXTERN SOMClass * SOMLINK MetaAnimalNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the MetaAnimal class object, and the methods it introduces. */
SOMEXTERN struct MetaAnimalClassDataStructure {
	SOMClass *classObject;
	somMToken createAnimal;
	somMToken _get_count;
} MetaAnimalClassData;
#define _MetaAnimal MetaAnimalClassData.classObject

/* The API to parentMtabs for MetaAnimal, and the instance data it introduces. */
SOMEXTERN struct MetaAnimalCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} MetaAnimalCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by MetaAnimal
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_MetaAnimal__get_count)(MetaAnimal *somSelf, Environment *ev);
typedef Animal*   (* SOMLINK somTD_MetaAnimal_createAnimal)(MetaAnimal *somSelf, Environment *ev,
		string name);
}

#endif /* MetaAnimal_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for MetaAnimal
 */
class MetaAnimal : public SOMClass
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!MetaAnimalClassData.classObject) 
      MetaAnimalNewClass(MetaAnimal_MajorVersion,MetaAnimal_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(MetaAnimalClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(MetaAnimalClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somNew for this Metaclass to specialize the return type. */
Animal* somNew()
{
   return (Animal *) ((void *)(SOMClass::somNew()));
}

/* public method: _get_count */
short   _get_count(Environment *ev)
{
   return SOM_Resolve(this,MetaAnimal,_get_count)
	(this,ev);
}


/* public method: createAnimal */
Animal*   createAnimal(Environment *ev,
		string name)
{
   return SOM_Resolve(this,MetaAnimal,createAnimal)
	(this,ev,name);
}



};   /* MetaAnimal */



#endif       /* SOM_MetaAnimal_xh */
