
/*
 * This file was generated by the SOM Compiler.
 * FileName: robin.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Robin_xh
#define SOM_Robin_xh

class Robin;

#define Robin_MajorVersion 0
#define Robin_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_Animal_xh
#include <animal.xh>
#endif
#ifndef SOM_FlyingObject_xh
#include <fly.xh>
#endif

#ifndef Robin_API
#define Robin_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */

/*
 * End of user-defined types.
 */

/* A procedure to create the Robin Class */
SOMEXTERN SOMClass * SOMLINK RobinNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Robin class object, and the methods it introduces. */
SOMEXTERN struct RobinClassDataStructure {
	SOMClass *classObject;
} RobinClassData;
#define _Robin RobinClassData.classObject

/* The API to parentMtabs for Robin, and the instance data it introduces. */
SOMEXTERN struct RobinCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} RobinCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Robin
 */
SOMEXTERN {

/*
 * -- Typedefs for Overloaded Wrapper Methods
 */
typedef void   (* SOMLINK somTD_Robin_somInit)(Robin *somSelf);
typedef void   (* SOMLINK somTD_Robin_somFree)(Robin *somSelf);
typedef void   (* SOMLINK somTD_Robin_somDefaultInit)(Robin *somSelf,
		somCtrlStruct* ctrl);
typedef void   (* SOMLINK somTD_Robin_somDestruct)(Robin *somSelf,
		octet doFree,
		somCtrlStruct* ctrl);
typedef void   (* SOMLINK somTD_Robin_somUninit)(Robin *somSelf);
typedef SOMClass*   (* SOMLINK somTD_Robin_somGetClass)(Robin *somSelf);
typedef string   (* SOMLINK somTD_Robin_somGetClassName)(Robin *somSelf);
typedef long   (* SOMLINK somTD_Robin_somGetSize)(Robin *somSelf);
typedef boolean   (* SOMLINK somTD_Robin_somIsA)(Robin *somSelf,
		SOMClass* aClassObj);
typedef boolean   (* SOMLINK somTD_Robin_somIsInstanceOf)(Robin *somSelf,
		SOMClass* aClassObj);
typedef boolean   (* SOMLINK somTD_Robin_somRespondsTo)(Robin *somSelf,
		somId mId);
typedef SOMObject_BooleanSequence   (* SOMLINK somTD_Robin_somComputeForwardVisitMask)(Robin *somSelf,
		somMToken visitMethod,
		SOMObject_SOMObjectSequence* visitOrder,
		SOMObject_somObjectOffsets* visitOffsets);
typedef SOMObject_BooleanSequence   (* SOMLINK somTD_Robin_somComputeReverseVisitMask)(Robin *somSelf,
		somMToken visitMethod,
		SOMObject_SOMObjectSequence* visitOrder,
		SOMObject_somObjectOffsets* visitOffsets);
typedef void   (* SOMLINK somTD_Robin_somDispatchV)(Robin *somSelf,
		somId methodId,
		somId descriptor,
		...);
typedef long   (* SOMLINK somTD_Robin_somDispatchL)(Robin *somSelf,
		somId methodId,
		somId descriptor,
		...);
typedef void*   (* SOMLINK somTD_Robin_somDispatchA)(Robin *somSelf,
		somId methodId,
		somId descriptor,
		...);
typedef double   (* SOMLINK somTD_Robin_somDispatchD)(Robin *somSelf,
		somId methodId,
		somId descriptor,
		...);
typedef boolean   (* SOMLINK somTD_Robin_somDispatch)(Robin *somSelf,
		somToken* retValue,
		somId methodId,
		...);
typedef boolean   (* SOMLINK somTD_Robin_somClassDispatch)(Robin *somSelf,
		SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...);
typedef boolean   (* SOMLINK somTD_Robin_somCastObj)(Robin *somSelf,
		SOMClass* cls);
typedef boolean   (* SOMLINK somTD_Robin_somResetObj)(Robin *somSelf);
typedef SOMObject*   (* SOMLINK somTD_Robin_somPrintSelf)(Robin *somSelf);
typedef void   (* SOMLINK somTD_Robin_somDumpSelf)(Robin *somSelf,
		long level);
typedef void   (* SOMLINK somTD_Robin_somDumpSelfInt)(Robin *somSelf,
		long level);
}

#endif /* Robin_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Robin
 */
class Robin : public Animal, public FlyingObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!RobinClassData.classObject) 
      RobinNewClass(Robin_MajorVersion,Robin_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(RobinClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(RobinClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/*
 * Overload methods inherited from multiple parents
 */

/* public method: somInit */
void   somInit()
{
   SOM_ResolveD(this,Robin,SOMObject,somInit)
	(this);
}


/* public method: somFree */
void   somFree()
{
   SOM_ResolveD(this,Robin,SOMObject,somFree)
	(this);
}


/* public method: somDefaultInit */
void   somDefaultInit(somCtrlStruct* ctrl)
{
   SOM_ResolveD(this,Robin,SOMObject,somDefaultInit)
	(this,ctrl);
}


/* public method: somDestruct */
void   somDestruct(octet doFree,
		somCtrlStruct* ctrl)
{
   SOM_ResolveD(this,Robin,SOMObject,somDestruct)
	(this,doFree,ctrl);
}


/* public method: somUninit */
void   somUninit()
{
   SOM_ResolveD(this,Robin,SOMObject,somUninit)
	(this);
}


/* public method: somGetClass */
SOMClass*   somGetClass()
{
   return SOM_ResolveD(this,Robin,SOMObject,somGetClass)
	(this);
}


/* public method: somGetClassName */
string   somGetClassName()
{
   return SOM_ResolveD(this,Robin,SOMObject,somGetClassName)
	(this);
}


/* public method: somGetSize */
long   somGetSize()
{
   return SOM_ResolveD(this,Robin,SOMObject,somGetSize)
	(this);
}


/* public method: somIsA */
boolean   somIsA(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,Robin,SOMObject,somIsA)
	(this,aClassObj);
}


/* public method: somIsInstanceOf */
boolean   somIsInstanceOf(SOMClass* aClassObj)
{
   return SOM_ResolveD(this,Robin,SOMObject,somIsInstanceOf)
	(this,aClassObj);
}


/* public method: somRespondsTo */
boolean   somRespondsTo(somId mId)
{
   return SOM_ResolveD(this,Robin,SOMObject,somRespondsTo)
	(this,mId);
}


/* public method: somComputeForwardVisitMask */
SOMObject_BooleanSequence   somComputeForwardVisitMask(somMToken visitMethod,
		SOMObject_SOMObjectSequence* visitOrder,
		SOMObject_somObjectOffsets* visitOffsets)
{
   return SOM_ResolveD(this,Robin,SOMObject,somComputeForwardVisitMask)
	(this,visitMethod,visitOrder,visitOffsets);
}


/* public method: somComputeReverseVisitMask */
SOMObject_BooleanSequence   somComputeReverseVisitMask(somMToken visitMethod,
		SOMObject_SOMObjectSequence* visitOrder,
		SOMObject_somObjectOffsets* visitOffsets)
{
   return SOM_ResolveD(this,Robin,SOMObject,somComputeReverseVisitMask)
	(this,visitMethod,visitOrder,visitOffsets);
}


/* public va_list method: somDispatchV */
/* the va_list invocation form */
void   Robin_somDispatchV(somId methodId,
		somId descriptor,
		va_list ap)
{
   SOM_ResolveD(this,Robin,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void   somDispatchV(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   SOM_ResolveD(this,Robin,SOMObject,somDispatchV)
	(this,methodId,descriptor,ap);
   va_end(ap);
}


/* public va_list method: somDispatchL */
/* the va_list invocation form */
long   Robin_somDispatchL(somId methodId,
		somId descriptor,
		va_list ap)
{
   return SOM_ResolveD(this,Robin,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
long   somDispatchL(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   long result = 
      (long) SOM_ResolveD(this,Robin,SOMObject,somDispatchL)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return result;
}


/* public va_list method: somDispatchA */
/* the va_list invocation form */
void*   Robin_somDispatchA(somId methodId,
		somId descriptor,
		va_list ap)
{
   return SOM_ResolveD(this,Robin,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
void*   somDispatchA(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   void* result = 
      (void*) SOM_ResolveD(this,Robin,SOMObject,somDispatchA)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return result;
}


/* public va_list method: somDispatchD */
/* the va_list invocation form */
double   Robin_somDispatchD(somId methodId,
		somId descriptor,
		va_list ap)
{
   return SOM_ResolveD(this,Robin,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
}

/* the varargs invocation form */
double   somDispatchD(somId methodId,
		somId descriptor,
		...)
{
   va_list ap;
   va_start(ap, descriptor);
   double result = 
      (double) SOM_ResolveD(this,Robin,SOMObject,somDispatchD)
	(this,methodId,descriptor,ap);
   va_end(ap);
   return result;
}


/* public va_list method: somDispatch */
/* the va_list invocation form */
boolean   Robin_somDispatch(somToken* retValue,
		somId methodId,
		va_list ap)
{
   return SOM_ResolveD(this,Robin,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somDispatch(somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean result = 
      (boolean) SOM_ResolveD(this,Robin,SOMObject,somDispatch)
	(this,retValue,methodId,ap);
   va_end(ap);
   return result;
}


/* public va_list method: somClassDispatch */
/* the va_list invocation form */
boolean   Robin_somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		va_list ap)
{
   return SOM_ResolveD(this,Robin,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
}

/* the varargs invocation form */
boolean   somClassDispatch(SOMClass* clsObj,
		somToken* retValue,
		somId methodId,
		...)
{
   va_list ap;
   va_start(ap, methodId);
   boolean result = 
      (boolean) SOM_ResolveD(this,Robin,SOMObject,somClassDispatch)
	(this,clsObj,retValue,methodId,ap);
   va_end(ap);
   return result;
}


/* public method: somCastObj */
boolean   somCastObj(SOMClass* cls)
{
   return SOM_ResolveD(this,Robin,SOMObject,somCastObj)
	(this,cls);
}


/* public method: somResetObj */
boolean   somResetObj()
{
   return SOM_ResolveD(this,Robin,SOMObject,somResetObj)
	(this);
}


/* public method: somPrintSelf */
SOMObject*   somPrintSelf()
{
   return SOM_ResolveD(this,Robin,SOMObject,somPrintSelf)
	(this);
}


/* public method: somDumpSelf */
void   somDumpSelf(long level)
{
   SOM_ResolveD(this,Robin,SOMObject,somDumpSelf)
	(this,level);
}


/* public method: somDumpSelfInt */
void   somDumpSelfInt(long level)
{
   SOM_ResolveD(this,Robin,SOMObject,somDumpSelfInt)
	(this,level);
}



};   /* Robin */



#endif       /* SOM_Robin_xh */
