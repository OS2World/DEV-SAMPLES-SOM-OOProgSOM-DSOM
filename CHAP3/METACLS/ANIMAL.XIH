
/*
 * This file was generated by the SOM Compiler.
 * FileName: animal.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxih: 2.7
 */

#ifndef SOM_Animal_xih
#define SOM_Animal_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_Animal_xh
#include <animal.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define Animal_MaxNoMethods 3

/*
 * -- Instance Data
 */
typedef struct {
	string name;
} AnimalData;

/*
 * -- Getdata Macro
 */
#define AnimalGetData(somSelf) \
    ((AnimalData *) \
        SOM_DataResolve(((SOMObject *)((void *)somSelf)), AnimalCClassData.instanceDataToken))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _name (somThis->name)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(Animal_Class_Source) || defined(SOM_Module_animal_Source))

/*
 * Trace/Debug macro
 */
#ifndef AnimalMethodDebug
#define AnimalMethodDebug(c,m) SOMMethodDebug(c,m)
#endif
#ifndef MetaAnimal_Class_Source
#define MetaAnimal_Class_Source
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somFree somSelf->somFree
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somComputeForwardVisitMask somSelf->somComputeForwardVisitMask
  #define _somComputeReverseVisitMask somSelf->somComputeReverseVisitMask
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_name somSelf->_get_name
  #define __set_name somSelf->_set_name
  #define _sleep somSelf->sleep
  #define _somInit somSelf->somInit
#endif


/*
 * -- The Animal ClassData Structure
 */
struct AnimalClassDataStructure AnimalClassData = {(MetaAnimal *) NULL};

/*
 * -- The auxiliary Animal ClassData structure
 */
struct AnimalCClassDataStructure AnimalCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_name
 */
SOM_Scope string  SOMLINK _get_name(Animal *somSelf, Environment *ev);
#ifndef somMN__get_name_defined
#define somMN__get_name_defined
static char *somMN__get_name = "_get_name";
static somId somId__get_name = &somMN__get_name;
#endif  /* somMN__get_name_defined */
#ifndef somDS__get_name_defined
#define somDS__get_name_defined
static char *somDS__get_name = "::Animal::name";
static somId somDI__get_name = &somDS__get_name;
#endif  /* somDS__get_name_defined */
#define _get_name_somApRdDefault

/*
 * New Method: _set_name
 */
SOM_Scope void  SOMLINK _set_name(Animal *somSelf, Environment *ev,
		string name);
#ifndef somMN__set_name_defined
#define somMN__set_name_defined
static char *somMN__set_name = "_set_name";
static somId somId__set_name = &somMN__set_name;
#endif  /* somMN__set_name_defined */
#ifndef somDS__set_name_defined
#define somDS__set_name_defined
static char *somDS__set_name = "::Animal::name";
static somId somDI__set_name = &somDS__set_name;
#endif  /* somDS__set_name_defined */
#define _set_name_somApRdDefault

/*
 * New Method: sleep
 */
SOM_Scope void  SOMLINK sleep(Animal *somSelf, Environment *ev);
#ifndef somMN_sleep_defined
#define somMN_sleep_defined
static char *somMN_sleep = "sleep";
static somId somId_sleep = &somMN_sleep;
#endif  /* somMN_sleep_defined */
#ifndef somDS_sleep_defined
#define somDS_sleep_defined
static char *somDS_sleep = "::Animal::sleep";
static somId somDI_sleep = &somDS_sleep;
#endif  /* somDS_sleep_defined */
#define sleep_somApRdDefault

/*
 * Overridden method: somInit
 */
SOM_Scope void  SOMLINK somInit(Animal *somSelf);
#ifndef somMN_somInit_defined
#define somMN_somInit_defined
static char *somMN_somInit = "somInit";
static somId somId_somInit = &somMN_somInit;
#endif  /* somMN_somInit_defined */
typedef void   (* SOMLINK somTD_xih_Animal_somInit)(Animal *somSelf);
/* define the parent method call macro */
#define Animal_parent_SOMObject_somInit(somSelf) \
  ((( somTD_xih_Animal_somInit ) \
	somParentNumResolve(AnimalCClassData.parentMtab, 1, SOMObjectClassData.somInit)) \
	 (somSelf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somInit
  #ifdef parent_somInit
    #define SOMGD_pmc_parent_somInit
    #undef parent_somInit
  #else
#define parent_somInit Animal_parent_SOMObject_somInit
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMObject_somInit
  #ifdef parent_SOMObject_somInit
    #define SOMGD_pmc_parent_SOMObject_somInit
    #undef parent_SOMObject_somInit
  #else
    #define parent_SOMObject_somInit Animal_parent_SOMObject_somInit
  #endif
#endif
#define Animal_parents_somInit(arg0) \
  (void) Animal_parent_SOMObject_somInit(arg0);

/*
 * -- Routines and Structures to create the class object
 */

/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t AnimalSM[] = {
    {    &AnimalClassData._get_name,
         &somId__get_name,
         &somDI__get_name,
         (somMethodProc *) _get_name,
         (somMethodProc *)((void*)-1),
#ifdef _get_name_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_nameStubs) },
#endif
    {    &AnimalClassData._set_name,
         &somId__set_name,
         &somDI__set_name,
         (somMethodProc *) _set_name,
         (somMethodProc *)((void*)-1),
#ifdef _set_name_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_set_nameStubs) },
#endif
    {    &AnimalClassData.sleep,
         &somId_sleep,
         &somDI_sleep,
         (somMethodProc *) sleep,
         (somMethodProc *)((void*)-1),
#ifdef sleep_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &sleepStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t AnimalOM[] = {
    {    &somId_somInit,
         (somMethodProc *) ((somTD_xih_Animal_somInit)somInit)    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_Animal = "Animal";
static char * somEMC_Animal = "MetaAnimal";
static char * somPCN_Animal_SOMObject = "SOMObject";

static somId somPCAnimal[] = {
    &somPCN_Animal_SOMObject,
};

static somStaticClassInfo AnimalSCI = {
    3, 3, 1, 0, 0, 0,
    Animal_MajorVersion, Animal_MinorVersion,
    sizeof(AnimalData), Animal_MaxNoMethods, 1,
    &somCN_Animal,
    &somEMC_Animal, 0,
    somPCAnimal,
    (somClassDataStructure *) &AnimalClassData,
    (somCClassDataStructure *) &AnimalCClassData,
    AnimalSM, AnimalOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    0, /* old style class, zero directinitclasses */
    0, /* no directinitclasses */
    0, /* number of general methods */
    0, /* no general methods */
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of releaseorder entries */
    0, /* no ReleaseOrder */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};



/* ---------------------------------- */
/*
 * Class Creation and Initialization
 */

MetaAnimal * SOMLINK AnimalNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMObjectNewClass(SOMObject_MajorVersion,SOMObject_MinorVersion);	/* static reference */
    /* Explicit metaclass, so get it */ 
    MetaAnimalNewClass(MetaAnimal_MajorVersion,MetaAnimal_MinorVersion);	/* static reference */
    return (MetaAnimal*) ((void*)(somBuildClass(1,&AnimalSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */
SOM_Scope string  SOMLINK _get_name(Animal *somSelf, Environment *ev){
    AnimalData *somThis = AnimalGetData(somSelf);
    AnimalMethodDebug("Animal","_get_name");
    SOM_IgnoreWarning(ev);

    return (somThis->name);
}
SOM_Scope void  SOMLINK _set_name(Animal *somSelf, Environment *ev,
		string name){
    AnimalData *somThis = AnimalGetData(somSelf);
    AnimalMethodDebug("Animal","_set_name");
    SOM_IgnoreWarning(ev);

    somThis->name = name;
}

#endif /* Primary Implementation Support */

#endif       /* SOM_Animal_xih */

#ifndef SOM_MetaAnimal_xih
#define SOM_MetaAnimal_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_MetaAnimal_xh
#include <animal.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define MetaAnimal_MaxNoMethods 2

/*
 * -- Instance Data
 */
typedef struct {
	short count;
} MetaAnimalData;

/*
 * -- Getdata Macro
 */
#define MetaAnimalGetData(somSelf) \
    ((MetaAnimalData *) \
        SOM_DataResolve(((SOMObject *)((void *)somSelf)), MetaAnimalCClassData.instanceDataToken))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _count (somThis->count)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(MetaAnimal_Class_Source) || defined(SOM_Module_animal_Source))

/*
 * Trace/Debug macro
 */
#ifndef MetaAnimalMethodDebug
#define MetaAnimalMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define __get_somDirectInitClasses somSelf->_get_somDirectInitClasses
  #define __set_somDirectInitClasses somSelf->_set_somDirectInitClasses
  #define _somGetInstanceInitMask somSelf->somGetInstanceInitMask
  #define _somGetInstanceDestructionMask somSelf->somGetInstanceDestructionMask
  #define _somGetInitMaskOffset somSelf->somGetInitMaskOffset
  #define _somGetDestructionMaskOffset somSelf->somGetDestructionMaskOffset
  #define _somShouldCallInit somSelf->somShouldCallInit
  #define _somAllocate somSelf->somAllocate
  #define _somDeallocate somSelf->somDeallocate
  #define _somNew somSelf->somNew
  #define _somNewNoInit somSelf->somNewNoInit
  #define _somRenew somSelf->somRenew
  #define _somRenewNoInit somSelf->somRenewNoInit
  #define _somRenewNoZero somSelf->somRenewNoZero
  #define _somRenewNoInitNoZero somSelf->somRenewNoInitNoZero
  #define _somInitClass somSelf->somInitClass
  #define _somInitMIClass somSelf->somInitMIClass
  #define _somAddStaticMethod somSelf->somAddStaticMethod
  #define _somAddMethod somSelf->somAddMethod
  #define _somRegLPMToken somSelf->somRegLPMToken
  #define _somAddDynamicMethod somSelf->somAddDynamicMethod
  #define _somClassReady somSelf->somClassReady
  #define _somOverrideSMethod somSelf->somOverrideSMethod
  #define _somGetApplyStub somSelf->somGetApplyStub
  #define _somGetClassData somSelf->somGetClassData
  #define _somSetClassData somSelf->somSetClassData
  #define _somGetClassMtab somSelf->somGetClassMtab
  #define _somGetInstanceOffset somSelf->somGetInstanceOffset
  #define _somGetInstancePartSize somSelf->somGetInstancePartSize
  #define _somGetInstanceSize somSelf->somGetInstanceSize
  #define _somGetDataAlignment somSelf->somGetDataAlignment
  #define _somGetInstanceToken somSelf->somGetInstanceToken
  #define _somGetMemberToken somSelf->somGetMemberToken
  #define _somGetMethodData somSelf->somGetMethodData
  #define _somGetRdStub somSelf->somGetRdStub
  #define _somGetMethodDescriptor somSelf->somGetMethodDescriptor
  #define _somGetMethodIndex somSelf->somGetMethodIndex
  #define _somGetMethodOffset somSelf->somGetMethodOffset
  #define _somGetMethodToken somSelf->somGetMethodToken
  #define _somGetName somSelf->somGetName
  #define _somGetNthMethodData somSelf->somGetNthMethodData
  #define _somGetNthMethodInfo somSelf->somGetNthMethodInfo
  #define _somGetNumMethods somSelf->somGetNumMethods
  #define _somGetNumStaticMethods somSelf->somGetNumStaticMethods
  #define _somGetParent somSelf->somGetParent
  #define _somGetParents somSelf->somGetParents
  #define _somGetPClsMtab somSelf->somGetPClsMtab
  #define _somGetPClsMtabs somSelf->somGetPClsMtabs
  #define _somGetVersionNumbers somSelf->somGetVersionNumbers
  #define _somSetMethodDescriptor somSelf->somSetMethodDescriptor
  #define _somCheckVersion somSelf->somCheckVersion
  #define _somDescendedFrom somSelf->somDescendedFrom
  #define _somSupportsMethod somSelf->somSupportsMethod
  #define __get_somReleaseOrder somSelf->_get_somReleaseOrder
  #define __set_somReleaseOrder somSelf->_set_somReleaseOrder
  #define _somGetClassDataEntry somSelf->somGetClassDataEntry
  #define _somSetClassDataEntry somSelf->somSetClassDataEntry
  #define _somDefinedMethod somSelf->somDefinedMethod
  #define _somCastObjCls somSelf->somCastObjCls
  #define _somResetObjCls somSelf->somResetObjCls
  #define __get_trueClass somSelf->_get_trueClass
  #define __get_castedClass somSelf->_get_castedClass
  #define _somCloneClass somSelf->somCloneClass
  #define _somFindMethod somSelf->somFindMethod
  #define _somFindMethodOk somSelf->somFindMethodOk
  #define _somFindSMethod somSelf->somFindSMethod
  #define _somFindSMethodOk somSelf->somFindSMethodOk
  #define _somLookupMethod somSelf->somLookupMethod
  #define _somOverrideMtab somSelf->somOverrideMtab
  #define __get_somInstanceDataOffsets somSelf->_get_somInstanceDataOffsets
  #define __get_somMethodOffsets somSelf->_get_somMethodOffsets
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somFree somSelf->somFree
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somComputeForwardVisitMask somSelf->somComputeForwardVisitMask
  #define _somComputeReverseVisitMask somSelf->somComputeReverseVisitMask
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_count somSelf->_get_count
  #define _createAnimal somSelf->createAnimal
#endif


/*
 * -- The MetaAnimal ClassData Structure
 */
struct MetaAnimalClassDataStructure MetaAnimalClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary MetaAnimal ClassData structure
 */
struct MetaAnimalCClassDataStructure MetaAnimalCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_count
 */
SOM_Scope short  SOMLINK _get_count(MetaAnimal *somSelf, Environment *ev);
#ifndef somMN__get_count_defined
#define somMN__get_count_defined
static char *somMN__get_count = "_get_count";
static somId somId__get_count = &somMN__get_count;
#endif  /* somMN__get_count_defined */
#ifndef somDS__get_count_defined
#define somDS__get_count_defined
static char *somDS__get_count = "::MetaAnimal::count";
static somId somDI__get_count = &somDS__get_count;
#endif  /* somDS__get_count_defined */

static somMethodInfo _get_countMethodInfo = {12, 8, 0};

static somApRdInfo _get_countStubs = {0, 0, &_get_countMethodInfo};

/*
 * New Method: createAnimal
 */
SOM_Scope Animal*  SOMLINK createAnimal(MetaAnimal *somSelf, Environment *ev,
		string name);
#ifndef somMN_createAnimal_defined
#define somMN_createAnimal_defined
static char *somMN_createAnimal = "createAnimal";
static somId somId_createAnimal = &somMN_createAnimal;
#endif  /* somMN_createAnimal_defined */
#ifndef somDS_createAnimal_defined
#define somDS_createAnimal_defined
static char *somDS_createAnimal = "::MetaAnimal::createAnimal";
static somId somDI_createAnimal = &somDS_createAnimal;
#endif  /* somDS_createAnimal_defined */
#define createAnimal_somApRdDefault

/*
 * -- Routines and Structures to create the class object
 */

/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t MetaAnimalSM[] = {
    {    &MetaAnimalClassData._get_count,
         &somId__get_count,
         &somDI__get_count,
         (somMethodProc *) _get_count,
         (somMethodProc *)((void*)-1),
#ifdef _get_count_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_countStubs) },
#endif
    {    &MetaAnimalClassData.createAnimal,
         &somId_createAnimal,
         &somDI_createAnimal,
         (somMethodProc *) createAnimal,
         (somMethodProc *)((void*)-1),
#ifdef createAnimal_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &createAnimalStubs) },
#endif
};


/*
 *  Initializers for class Ids
 */
static char * somCN_MetaAnimal = "MetaAnimal";
static char * somPCN_MetaAnimal_SOMClass = "SOMClass";

static somId somPCMetaAnimal[] = {
    &somPCN_MetaAnimal_SOMClass,
};

static somStaticClassInfo MetaAnimalSCI = {
    3, 2, 0, 0, 0, 0,
    MetaAnimal_MajorVersion, MetaAnimal_MinorVersion,
    sizeof(MetaAnimalData), MetaAnimal_MaxNoMethods, 1,
    &somCN_MetaAnimal,
    (somId) NULL, 1,
    somPCMetaAnimal,
    (somClassDataStructure *) &MetaAnimalClassData,
    (somCClassDataStructure *) &MetaAnimalCClassData,
    MetaAnimalSM, (somOverrideMethod_t *) NULL,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    2, /* type code alignment */
    0, /* old style class, zero directinitclasses */
    0, /* no directinitclasses */
    0, /* number of general methods */
    0, /* no general methods */
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of releaseorder entries */
    0, /* no ReleaseOrder */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};



/* ---------------------------------- */
/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK MetaAnimalNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMClassNewClass(SOMClass_MajorVersion,SOMClass_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&MetaAnimalSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */
SOM_Scope short  SOMLINK _get_count(MetaAnimal *somSelf, Environment *ev){
    MetaAnimalData *somThis = MetaAnimalGetData(somSelf);
    MetaAnimalMethodDebug("MetaAnimal","_get_count");
    SOM_IgnoreWarning(ev);

    return (somThis->count);
}

#endif /* Primary Implementation Support */

#endif       /* SOM_MetaAnimal_xih */
