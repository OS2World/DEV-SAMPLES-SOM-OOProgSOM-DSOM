
/*
 * This file was generated by the SOM Compiler.
 * FileName: a.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

/*
 *  You have to try this exercise yourself. Just uncomment
 *  the lines and run NMAKE
 * 
 */


#ifndef SOM_A_xh
#define SOM_A_xh

class A;

#define A_MajorVersion 0
#define A_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef A_API
#define A_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the A Class */
SOMEXTERN SOMClass * SOMLINK ANewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the A class object, and the methods it introduces. */
SOMEXTERN struct AClassDataStructure {
	SOMClass *classObject;
	somMToken display;
	somMToken _get_val1;
	somMToken _set_val1;
	somMToken _get_val2;
	somMToken _set_val2;
} AClassData;
#define _A AClassData.classObject

/* The API to parentMtabs for A, and the instance data it introduces. */
SOMEXTERN struct ACClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} ACClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by A
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_A__get_val1)(A *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_A__set_val1)(A *somSelf, Environment *ev,
		short val1);
typedef short   (* SOMLINK somTD_A__get_val2)(A *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_A__set_val2)(A *somSelf, Environment *ev,
		short val2);
typedef void   (* SOMLINK somTD_A_display)(A *somSelf, Environment *ev);
}

#endif /* A_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for A
 */
class A : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!AClassData.classObject) 
      ANewClass(A_MajorVersion,A_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(AClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(AClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: _get_val1 */
short   _get_val1(Environment *ev)
{
   return SOM_Resolve(this,A,_get_val1)
	(this,ev);
}


/* public method: _set_val1 */
void   _set_val1(Environment *ev,
		short val1)
{
   SOM_Resolve(this,A,_set_val1)
	(this,ev,val1);
}


/* public method: _get_val2 */
short   _get_val2(Environment *ev)
{
   return SOM_Resolve(this,A,_get_val2)
	(this,ev);
}


/* public method: _set_val2 */
void   _set_val2(Environment *ev,
		short val2)
{
   SOM_Resolve(this,A,_set_val2)
	(this,ev,val2);
}


/* public method: display */
void   display(Environment *ev)
{
   SOM_Resolve(this,A,display)
	(this,ev);
}



};   /* A */



#endif       /* SOM_A_xh */
