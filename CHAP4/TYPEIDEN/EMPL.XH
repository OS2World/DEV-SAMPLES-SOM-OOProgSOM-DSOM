
/*
 * This file was generated by the SOM Compiler.
 * FileName: empl.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Employee_xh
#define SOM_Employee_xh

class Employee;

#define Employee_MajorVersion 0
#define Employee_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Employee_API
#define Employee_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the Employee Class */
SOMEXTERN SOMClass * SOMLINK EmployeeNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Employee class object, and the methods it introduces. */
SOMEXTERN struct EmployeeClassDataStructure {
	SOMClass *classObject;
	somMToken salary;
} EmployeeClassData;
#define _Employee EmployeeClassData.classObject

/* The API to parentMtabs for Employee, and the instance data it introduces. */
SOMEXTERN struct EmployeeCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} EmployeeCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Employee
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_Employee_salary)(Employee *somSelf, Environment *ev);
}

#endif /* Employee_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Employee
 */
class Employee : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!EmployeeClassData.classObject) 
      EmployeeNewClass(Employee_MajorVersion,Employee_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(EmployeeClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(EmployeeClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: salary */
short   salary(Environment *ev)
{
   return SOM_Resolve(this,Employee,salary)
	(this,ev);
}



};   /* Employee */



#endif       /* SOM_Employee_xh */
