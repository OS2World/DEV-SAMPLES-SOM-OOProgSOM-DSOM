
/*
 * This file was generated by the SOM Compiler.
 * FileName: mgr.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Manager_xh
#define SOM_Manager_xh

class Manager;

#define Manager_MajorVersion 0
#define Manager_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_Employee_xh
#include <empl.xh>
#endif

#ifndef Manager_API
#define Manager_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the Manager Class */
SOMEXTERN SOMClass * SOMLINK ManagerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Manager class object, and the methods it introduces. */
SOMEXTERN struct ManagerClassDataStructure {
	SOMClass *classObject;
	somMToken bonus;
} ManagerClassData;
#define _Manager ManagerClassData.classObject

/* The API to parentMtabs for Manager, and the instance data it introduces. */
SOMEXTERN struct ManagerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} ManagerCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Manager
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_Manager_bonus)(Manager *somSelf, Environment *ev);
}

#endif /* Manager_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Manager
 */
class Manager : public Employee
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!ManagerClassData.classObject) 
      ManagerNewClass(Manager_MajorVersion,Manager_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(ManagerClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(ManagerClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: bonus */
short   bonus(Environment *ev)
{
   return SOM_Resolve(this,Manager,bonus)
	(this,ev);
}



};   /* Manager */



#endif       /* SOM_Manager_xh */
