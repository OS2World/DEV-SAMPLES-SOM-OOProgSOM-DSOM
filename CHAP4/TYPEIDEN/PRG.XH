
/*
 * This file was generated by the SOM Compiler.
 * FileName: prg.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Programmer_xh
#define SOM_Programmer_xh

class Programmer;

#define Programmer_MajorVersion 0
#define Programmer_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_Employee_xh
#include <empl.xh>
#endif

#ifndef Programmer_API
#define Programmer_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the Programmer Class */
SOMEXTERN SOMClass * SOMLINK ProgrammerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Programmer class object, and the methods it introduces. */
SOMEXTERN struct ProgrammerClassDataStructure {
	SOMClass *classObject;
	somMToken overtime;
} ProgrammerClassData;
#define _Programmer ProgrammerClassData.classObject

/* The API to parentMtabs for Programmer, and the instance data it introduces. */
SOMEXTERN struct ProgrammerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} ProgrammerCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Programmer
 */
SOMEXTERN {
typedef short   (* SOMLINK somTD_Programmer_overtime)(Programmer *somSelf, Environment *ev);
}

#endif /* Programmer_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Programmer
 */
class Programmer : public Employee
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!ProgrammerClassData.classObject) 
      ProgrammerNewClass(Programmer_MajorVersion,Programmer_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(ProgrammerClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(ProgrammerClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: overtime */
short   overtime(Environment *ev)
{
   return SOM_Resolve(this,Programmer,overtime)
	(this,ev);
}



};   /* Programmer */



#endif       /* SOM_Programmer_xh */
