
/*
 * This file was generated by the SOM Compiler.
 * FileName: cat.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Cat_xh
#define SOM_Cat_xh

class Cat;

#define Cat_MajorVersion 0
#define Cat_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Cat_API
#define Cat_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the Cat Class */
SOMEXTERN SOMClass * SOMLINK CatNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Cat class object, and the methods it introduces. */
SOMEXTERN struct CatClassDataStructure {
	SOMClass *classObject;
	somMToken display;
	somMToken _get_name;
	somMToken _set_name;
} CatClassData;
#define _Cat CatClassData.classObject

/* The API to parentMtabs for Cat, and the instance data it introduces. */
SOMEXTERN struct CatCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} CatCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Cat
 */
SOMEXTERN {
typedef string   (* SOMLINK somTD_Cat__get_name)(Cat *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Cat__set_name)(Cat *somSelf, Environment *ev,
		string name);
typedef void   (* SOMLINK somTD_Cat_display)(Cat *somSelf, Environment *ev);
}

#endif /* Cat_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Cat
 */
class Cat : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!CatClassData.classObject) 
      CatNewClass(Cat_MajorVersion,Cat_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(CatClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(CatClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: _get_name */
string   _get_name(Environment *ev)
{
   return SOM_Resolve(this,Cat,_get_name)
	(this,ev);
}


/* public method: _set_name */
void   _set_name(Environment *ev,
		string name)
{
   SOM_Resolve(this,Cat,_set_name)
	(this,ev,name);
}


/* public method: display */
void   display(Environment *ev)
{
   SOM_Resolve(this,Cat,display)
	(this,ev);
}



};   /* Cat */



#endif       /* SOM_Cat_xh */
