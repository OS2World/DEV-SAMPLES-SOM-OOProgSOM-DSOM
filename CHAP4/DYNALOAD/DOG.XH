
/*
 * This file was generated by the SOM Compiler.
 * FileName: dog.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Dog_xh
#define SOM_Dog_xh

class Dog;

#define Dog_MajorVersion 0
#define Dog_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Dog_API
#define Dog_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the Dog Class */
SOMEXTERN SOMClass * SOMLINK DogNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Dog class object, and the methods it introduces. */
SOMEXTERN struct DogClassDataStructure {
	SOMClass *classObject;
	somMToken display;
	somMToken _get_name;
	somMToken _set_name;
} DogClassData;
#define _Dog DogClassData.classObject

/* The API to parentMtabs for Dog, and the instance data it introduces. */
SOMEXTERN struct DogCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} DogCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Dog
 */
SOMEXTERN {
typedef string   (* SOMLINK somTD_Dog__get_name)(Dog *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Dog__set_name)(Dog *somSelf, Environment *ev,
		string name);
typedef void   (* SOMLINK somTD_Dog_display)(Dog *somSelf, Environment *ev);
}

#endif /* Dog_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Dog
 */
class Dog : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!DogClassData.classObject) 
      DogNewClass(Dog_MajorVersion,Dog_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(DogClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(DogClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: _get_name */
string   _get_name(Environment *ev)
{
   return SOM_Resolve(this,Dog,_get_name)
	(this,ev);
}


/* public method: _set_name */
void   _set_name(Environment *ev,
		string name)
{
   SOM_Resolve(this,Dog,_set_name)
	(this,ev,name);
}


/* public method: display */
void   display(Environment *ev)
{
   SOM_Resolve(this,Dog,display)
	(this,ev);
}



};   /* Dog */



#endif       /* SOM_Dog_xh */
