
/*
 * This file was generated by the SOM Compiler.
 * FileName: day.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Day_xh
#define SOM_Day_xh

class Day;

#define Day_MajorVersion 0
#define Day_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Day_API
#define Day_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;
class WorkItem;
#define Day_MAXITEM 50 /* 50 */
#ifndef _IDL_SEQUENCE_WorkItem_defined
#define _IDL_SEQUENCE_WorkItem_defined
typedef struct {
    unsigned long _maximum;
    unsigned long _length;
    WorkItem **_buffer;
} _IDL_SEQUENCE_WorkItem;
#endif /* _IDL_SEQUENCE_WorkItem_defined */ 

#ifndef SOM_DONT_USE_SHORT_NAMES
#ifndef SOMTGD_MAXITEM
    #ifdef MAXITEM
        #undef MAXITEM
        #define SOMTGD_MAXITEM 1
    #else
        #define MAXITEM Day_MAXITEM
    #endif /* MAXITEM */
#endif /* SOMTGD_MAXITEM */
#ifndef SOMTGD__IDL_SEQUENCE_WorkItem
    #ifdef _IDL_SEQUENCE_WorkItem
        #undef _IDL_SEQUENCE_WorkItem
        #define SOMTGD__IDL_SEQUENCE_WorkItem 1
    #else
        #define _IDL_SEQUENCE_WorkItem _IDL_SEQUENCE_WorkItem
    #endif /* _IDL_SEQUENCE_WorkItem */
#endif /* SOMTGD__IDL_SEQUENCE_WorkItem */
#endif /* SOM_DONT_USE_SHORT_NAMES */

/*
 * End of user-defined types.
 */

/* A procedure to create the Day Class */
SOMEXTERN SOMClass * SOMLINK DayNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Day class object, and the methods it introduces. */
SOMEXTERN struct DayClassDataStructure {
	SOMClass *classObject;
	somMToken _get_date;
	somMToken _set_date;
	somMToken _get_workList;
	somMToken _set_workList;
	somMToken book;
	somMToken removeItem;
} DayClassData;
#define _Day DayClassData.classObject

/* The API to parentMtabs for Day, and the instance data it introduces. */
SOMEXTERN struct DayCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} DayCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Day
 */
SOMEXTERN {
typedef long   (* SOMLINK somTD_Day__get_date)(Day *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Day__set_date)(Day *somSelf, Environment *ev,
		long date);
typedef _IDL_SEQUENCE_WorkItem   (* SOMLINK somTD_Day__get_workList)(Day *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Day__set_workList)(Day *somSelf, Environment *ev,
		_IDL_SEQUENCE_WorkItem* workList);
typedef short   (* SOMLINK somTD_Day_book)(Day *somSelf, Environment *ev,
		WorkItem* entry);
typedef short   (* SOMLINK somTD_Day_removeItem)(Day *somSelf, Environment *ev,
		string start,
		string end,
		string desc);
}

#endif /* Day_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Day
 */
class Day : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!DayClassData.classObject) 
      DayNewClass(Day_MajorVersion,Day_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(DayClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(DayClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: _get_date */
long   _get_date(Environment *ev)
{
   return SOM_Resolve(this,Day,_get_date)
	(this,ev);
}


/* public method: _set_date */
void   _set_date(Environment *ev,
		long date)
{
   SOM_Resolve(this,Day,_set_date)
	(this,ev,date);
}


/* public method: _get_workList */
_IDL_SEQUENCE_WorkItem   _get_workList(Environment *ev)
{
   return SOM_Resolve(this,Day,_get_workList)
	(this,ev);
}


/* public method: _set_workList */
void   _set_workList(Environment *ev,
		_IDL_SEQUENCE_WorkItem* workList)
{
   SOM_Resolve(this,Day,_set_workList)
	(this,ev,workList);
}


/* public method: book */
short   book(Environment *ev,
		WorkItem* entry)
{
   return SOM_Resolve(this,Day,book)
	(this,ev,entry);
}


/* public method: removeItem */
short   removeItem(Environment *ev,
		string start,
		string end,
		string desc)
{
   return SOM_Resolve(this,Day,removeItem)
	(this,ev,start,end,desc);
}



};   /* Day */



#endif       /* SOM_Day_xh */
