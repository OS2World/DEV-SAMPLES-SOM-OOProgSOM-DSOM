
/*
 * This file was generated by the SOM Compiler.
 * FileName: hello.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_Hello_xh
#define SOM_Hello_xh

class Hello;

#define Hello_MajorVersion 0
#define Hello_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef Hello_API
#define Hello_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the Hello Class */
SOMEXTERN SOMClass * SOMLINK HelloNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the Hello class object, and the methods it introduces. */
SOMEXTERN struct HelloClassDataStructure {
	SOMClass *classObject;
	somMToken printHello;
	somMToken _set_msg;
	somMToken _get_msg;
} HelloClassData;
#define _Hello HelloClassData.classObject

/* The API to parentMtabs for Hello, and the instance data it introduces. */
SOMEXTERN struct HelloCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} HelloCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by Hello
 */
SOMEXTERN {
typedef string   (* SOMLINK somTD_Hello__get_msg)(Hello *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_Hello__set_msg)(Hello *somSelf, Environment *ev,
		string msg);
typedef void   (* SOMLINK somTD_Hello_printHello)(Hello *somSelf, Environment *ev);
}

#endif /* Hello_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for Hello
 */
class Hello : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!HelloClassData.classObject) 
      HelloNewClass(Hello_MajorVersion,Hello_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(HelloClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(HelloClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: _get_msg */
string   _get_msg(Environment *ev)
{
   return SOM_Resolve(this,Hello,_get_msg)
	(this,ev);
}


/* public method: _set_msg */
void   _set_msg(Environment *ev,
		string msg)
{
   SOM_Resolve(this,Hello,_set_msg)
	(this,ev,msg);
}


/* public method: printHello */
void   printHello(Environment *ev)
{
   SOM_Resolve(this,Hello,printHello)
	(this,ev);
}



};   /* Hello */



#endif       /* SOM_Hello_xh */
