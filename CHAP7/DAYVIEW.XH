
/*
 * This file was generated by the SOM Compiler.
 * FileName: dayview.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_DayView_xh
#define SOM_DayView_xh

class DayView;

#define DayView_MajorVersion 0
#define DayView_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMObject_xh
#include <somobj.xh>
#endif

#ifndef DayView_API
#define DayView_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMClass;

/*
 * End of user-defined types.
 */

/* A procedure to create the DayView Class */
SOMEXTERN SOMClass * SOMLINK DayViewNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the DayView class object, and the methods it introduces. */
SOMEXTERN struct DayViewClassDataStructure {
	SOMClass *classObject;
	somMToken _get_owner;
	somMToken _set_owner;
	somMToken notifyDayPlanner;
} DayViewClassData;
#define _DayView DayViewClassData.classObject

/* The API to parentMtabs for DayView, and the instance data it introduces. */
SOMEXTERN struct DayViewCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} DayViewCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by DayView
 */
SOMEXTERN {
typedef void*   (* SOMLINK somTD_DayView__get_owner)(DayView *somSelf, Environment *ev);
typedef void   (* SOMLINK somTD_DayView__set_owner)(DayView *somSelf, Environment *ev,
		void* owner);
typedef void   (* SOMLINK somTD_DayView_notifyDayPlanner)(DayView *somSelf, Environment *ev,
		long eventId);
}

#endif /* DayView_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for DayView
 */
class DayView : public SOMObject
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!DayViewClassData.classObject) 
      DayViewNewClass(DayView_MajorVersion,DayView_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(DayViewClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(DayViewClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* public method: _get_owner */
void*   _get_owner(Environment *ev)
{
   return SOM_Resolve(this,DayView,_get_owner)
	(this,ev);
}


/* public method: _set_owner */
void   _set_owner(Environment *ev,
		void* owner)
{
   SOM_Resolve(this,DayView,_set_owner)
	(this,ev,owner);
}


/* public method: notifyDayPlanner */
void   notifyDayPlanner(Environment *ev,
		long eventId)
{
   SOM_Resolve(this,DayView,notifyDayPlanner)
	(this,ev,eventId);
}



};   /* DayView */



#endif       /* SOM_DayView_xh */
