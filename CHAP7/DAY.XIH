
/*
 * This file was generated by the SOM Compiler.
 * FileName: day.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxih: 2.7
 */

#ifndef SOM_Day_xih
#define SOM_Day_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_Day_xh
#include <day.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define Day_MaxNoMethods 10

/*
 * -- Instance Data
 */
typedef struct {
	long date;
	_IDL_SEQUENCE_WorkItem workList;
	string methodName;
	SOMObject* objectPtr;
} DayData;

/*
 * -- Getdata Macro
 */
#define DayGetData(somSelf) \
    ((DayData *) \
        SOM_DataResolve(((SOMObject *)((void *)somSelf)), DayCClassData.instanceDataToken))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _date (somThis->date)
  #define _workList (somThis->workList)
  #define _methodName (somThis->methodName)
  #define _objectPtr (somThis->objectPtr)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(Day_Class_Source) || defined(SOM_Module_day_Source))

/*
 * Trace/Debug macro
 */
#ifndef DayMethodDebug
#define DayMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _somrLock somSelf->somrLock
  #define _somrLockNlogOp somSelf->somrLockNlogOp
  #define _somrReleaseNPropagateUpdate somSelf->somrReleaseNPropagateUpdate
  #define _somrReleaseLockNAbortUpdate somSelf->somrReleaseLockNAbortUpdate
  #define _somrReleaseNPropagateOperation somSelf->somrReleaseNPropagateOperation
  #define _somrReleaseLockNAbortOp somSelf->somrReleaseLockNAbortOp
  #define _somrRepInit somSelf->somrRepInit
  #define _somrRepUninit somSelf->somrRepUninit
  #define _somrApplyUpdates somSelf->somrApplyUpdates
  #define _somrDoDirective somSelf->somrDoDirective
  #define _somrPin somSelf->somrPin
  #define _somrUnPin somSelf->somrUnPin
  #define _somrGetSecurityPolicy somSelf->somrGetSecurityPolicy
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somrSetObjName somSelf->somrSetObjName
  #define _somrSetObjName somSelf->somrSetObjName
  #define _somrGetObjName somSelf->somrGetObjName
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somFree somSelf->somFree
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somComputeForwardVisitMask somSelf->somComputeForwardVisitMask
  #define _somComputeReverseVisitMask somSelf->somComputeReverseVisitMask
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _somrGetState somSelf->somrGetState
  #define _somrSetState somSelf->somrSetState
  #define _somFree somSelf->somFree
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somComputeForwardVisitMask somSelf->somComputeForwardVisitMask
  #define _somComputeReverseVisitMask somSelf->somComputeReverseVisitMask
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_date somSelf->_get_date
  #define __set_date somSelf->_set_date
  #define __get_workList somSelf->_get_workList
  #define __set_workList somSelf->_set_workList
  #define _book2 somSelf->book2
  #define _removeItem somSelf->removeItem
  #define _initReplica somSelf->initReplica
  #define _registerView somSelf->registerView
  #define _notifyView somSelf->notifyView
  #define _getViewObject somSelf->getViewObject
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somrGetState somSelf->somrGetState
  #define _somrSetState somSelf->somrSetState
  #define _somrDoDirective somSelf->somrDoDirective
#endif


/*
 * -- The Day ClassData Structure
 */
struct DayClassDataStructure DayClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary Day ClassData structure
 */
struct DayCClassDataStructure DayCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_date
 */
SOM_Scope long  SOMLINK _get_date(Day *somSelf, Environment *ev);
#ifndef somMN__get_date_defined
#define somMN__get_date_defined
static char *somMN__get_date = "_get_date";
static somId somId__get_date = &somMN__get_date;
#endif  /* somMN__get_date_defined */
#ifndef somDS__get_date_defined
#define somDS__get_date_defined
static char *somDS__get_date = "::Day::date";
static somId somDI__get_date = &somDS__get_date;
#endif  /* somDS__get_date_defined */
#define _get_date_somApRdDefault

/*
 * New Method: _set_date
 */
SOM_Scope void  SOMLINK _set_date(Day *somSelf, Environment *ev,
		long date);
#ifndef somMN__set_date_defined
#define somMN__set_date_defined
static char *somMN__set_date = "_set_date";
static somId somId__set_date = &somMN__set_date;
#endif  /* somMN__set_date_defined */
#ifndef somDS__set_date_defined
#define somDS__set_date_defined
static char *somDS__set_date = "::Day::date";
static somId somDI__set_date = &somDS__set_date;
#endif  /* somDS__set_date_defined */
#define _set_date_somApRdDefault

/*
 * New Method: _get_workList
 */
SOM_Scope _IDL_SEQUENCE_WorkItem  SOMLINK _get_workList(Day *somSelf, Environment *ev);
#ifndef somMN__get_workList_defined
#define somMN__get_workList_defined
static char *somMN__get_workList = "_get_workList";
static somId somId__get_workList = &somMN__get_workList;
#endif  /* somMN__get_workList_defined */
#ifndef somDS__get_workList_defined
#define somDS__get_workList_defined
static char *somDS__get_workList = "::Day::workList";
static somId somDI__get_workList = &somDS__get_workList;
#endif  /* somDS__get_workList_defined */

static somMethodInfo _get_workListMethodInfo = {8, 8, 0};

static somApRdInfo _get_workListStubs = {0, 0, &_get_workListMethodInfo};

/*
 * New Method: _set_workList
 */
SOM_Scope void  SOMLINK _set_workList(Day *somSelf, Environment *ev,
		_IDL_SEQUENCE_WorkItem* workList);
#ifndef somMN__set_workList_defined
#define somMN__set_workList_defined
static char *somMN__set_workList = "_set_workList";
static somId somId__set_workList = &somMN__set_workList;
#endif  /* somMN__set_workList_defined */
#ifndef somDS__set_workList_defined
#define somDS__set_workList_defined
static char *somDS__set_workList = "::Day::workList";
static somId somDI__set_workList = &somDS__set_workList;
#endif  /* somDS__set_workList_defined */
#define _set_workList_somApRdDefault

/*
 * New Method: book2
 */
SOM_Scope short  SOMLINK book2(Day *somSelf, Environment *ev,
		string start,
		string end,
		string desc);
#ifndef somMN_book2_defined
#define somMN_book2_defined
static char *somMN_book2 = "book2";
static somId somId_book2 = &somMN_book2;
#endif  /* somMN_book2_defined */
#ifndef somDS_book2_defined
#define somDS_book2_defined
static char *somDS_book2 = "::Day::book2";
static somId somDI_book2 = &somDS_book2;
#endif  /* somDS_book2_defined */

static somMethodInfo book2MethodInfo = {12, 20, 0};

static somApRdInfo book2Stubs = {0, 0, &book2MethodInfo};

/*
 * New Method: removeItem
 */
SOM_Scope short  SOMLINK removeItem(Day *somSelf, Environment *ev,
		string start,
		string end,
		string desc);
#ifndef somMN_removeItem_defined
#define somMN_removeItem_defined
static char *somMN_removeItem = "removeItem";
static somId somId_removeItem = &somMN_removeItem;
#endif  /* somMN_removeItem_defined */
#ifndef somDS_removeItem_defined
#define somDS_removeItem_defined
static char *somDS_removeItem = "::Day::removeItem";
static somId somDI_removeItem = &somDS_removeItem;
#endif  /* somDS_removeItem_defined */

static somMethodInfo removeItemMethodInfo = {12, 20, 0};

static somApRdInfo removeItemStubs = {0, 0, &removeItemMethodInfo};

/*
 * New Method: initReplica
 */
SOM_Scope void  SOMLINK initReplica(Day *somSelf, Environment *ev,
		string replicaName);
#ifndef somMN_initReplica_defined
#define somMN_initReplica_defined
static char *somMN_initReplica = "initReplica";
static somId somId_initReplica = &somMN_initReplica;
#endif  /* somMN_initReplica_defined */
#ifndef somDS_initReplica_defined
#define somDS_initReplica_defined
static char *somDS_initReplica = "::Day::initReplica";
static somId somDI_initReplica = &somDS_initReplica;
#endif  /* somDS_initReplica_defined */
#define initReplica_somApRdDefault

/*
 * New Method: registerView
 */
SOM_Scope void  SOMLINK registerView(Day *somSelf, Environment *ev,
		SOMObject* anyObj,
		string methodName);
#ifndef somMN_registerView_defined
#define somMN_registerView_defined
static char *somMN_registerView = "registerView";
static somId somId_registerView = &somMN_registerView;
#endif  /* somMN_registerView_defined */
#ifndef somDS_registerView_defined
#define somDS_registerView_defined
static char *somDS_registerView = "::Day::registerView";
static somId somDI_registerView = &somDS_registerView;
#endif  /* somDS_registerView_defined */
#define registerView_somApRdDefault

/*
 * New Method: notifyView
 */
SOM_Scope void  SOMLINK notifyView(Day *somSelf, Environment *ev,
		long eventId);
#ifndef somMN_notifyView_defined
#define somMN_notifyView_defined
static char *somMN_notifyView = "notifyView";
static somId somId_notifyView = &somMN_notifyView;
#endif  /* somMN_notifyView_defined */
#ifndef somDS_notifyView_defined
#define somDS_notifyView_defined
static char *somDS_notifyView = "::Day::notifyView";
static somId somDI_notifyView = &somDS_notifyView;
#endif  /* somDS_notifyView_defined */
#define notifyView_somApRdDefault

/*
 * New Method: getViewObject
 */
SOM_Scope SOMObject*  SOMLINK getViewObject(Day *somSelf, Environment *ev);
#ifndef somMN_getViewObject_defined
#define somMN_getViewObject_defined
static char *somMN_getViewObject = "getViewObject";
static somId somId_getViewObject = &somMN_getViewObject;
#endif  /* somMN_getViewObject_defined */
#ifndef somDS_getViewObject_defined
#define somDS_getViewObject_defined
static char *somDS_getViewObject = "::Day::getViewObject";
static somId somDI_getViewObject = &somDS_getViewObject;
#endif  /* somDS_getViewObject_defined */
#define getViewObject_somApRdDefault

/*
 * Overridden method: somInit
 */
SOM_Scope void  SOMLINK somInit(Day *somSelf);
#ifndef somMN_somInit_defined
#define somMN_somInit_defined
static char *somMN_somInit = "somInit";
static somId somId_somInit = &somMN_somInit;
#endif  /* somMN_somInit_defined */
typedef void   (* SOMLINK somTD_xih_Day_somInit)(Day *somSelf);
/* define the parent method call macro */
#define Day_parent_SOMRReplicbl_somInit(somSelf) \
  ((( somTD_xih_Day_somInit ) \
	somParentNumResolve(DayCClassData.parentMtab, 1, SOMObjectClassData.somInit)) \
	 (somSelf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somInit
  #ifdef parent_somInit
    #define SOMGD_pmc_parent_somInit
    #undef parent_somInit
  #else
#define parent_somInit Day_parent_SOMRReplicbl_somInit
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMRReplicbl_somInit
  #ifdef parent_SOMRReplicbl_somInit
    #define SOMGD_pmc_parent_SOMRReplicbl_somInit
    #undef parent_SOMRReplicbl_somInit
  #else
    #define parent_SOMRReplicbl_somInit Day_parent_SOMRReplicbl_somInit
  #endif
#endif
#define Day_parents_somInit(arg0) \
  (void) Day_parent_SOMRReplicbl_somInit(arg0);

/*
 * Overridden method: somUninit
 */
SOM_Scope void  SOMLINK somUninit(Day *somSelf);
#ifndef somMN_somUninit_defined
#define somMN_somUninit_defined
static char *somMN_somUninit = "somUninit";
static somId somId_somUninit = &somMN_somUninit;
#endif  /* somMN_somUninit_defined */
typedef void   (* SOMLINK somTD_xih_Day_somUninit)(Day *somSelf);
/* define the parent method call macro */
#define Day_parent_SOMRReplicbl_somUninit(somSelf) \
  ((( somTD_xih_Day_somUninit ) \
	somParentNumResolve(DayCClassData.parentMtab, 1, SOMObjectClassData.somUninit)) \
	 (somSelf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somUninit
  #ifdef parent_somUninit
    #define SOMGD_pmc_parent_somUninit
    #undef parent_somUninit
  #else
#define parent_somUninit Day_parent_SOMRReplicbl_somUninit
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMRReplicbl_somUninit
  #ifdef parent_SOMRReplicbl_somUninit
    #define SOMGD_pmc_parent_SOMRReplicbl_somUninit
    #undef parent_SOMRReplicbl_somUninit
  #else
    #define parent_SOMRReplicbl_somUninit Day_parent_SOMRReplicbl_somUninit
  #endif
#endif
#define Day_parents_somUninit(arg0) \
  (void) Day_parent_SOMRReplicbl_somUninit(arg0);

/*
 * Overridden method: somrGetState
 */
SOM_Scope void  SOMLINK somrGetState(Day *somSelf, Environment *ev,
		string* buf);
#ifndef somMN_somrGetState_defined
#define somMN_somrGetState_defined
static char *somMN_somrGetState = "somrGetState";
static somId somId_somrGetState = &somMN_somrGetState;
#endif  /* somMN_somrGetState_defined */
typedef void   (* SOMLINK somTD_xih_Day_somrGetState)(Day *somSelf, Environment *ev,
		string* buf);
/* define the parent method call macro */
#define Day_parent_SOMRReplicbl_somrGetState(somSelf,ev,buf) \
  ((( somTD_xih_Day_somrGetState ) \
	somParentNumResolve(DayCClassData.parentMtab, 1, SOMRLinearizableClassData.somrGetState)) \
	 (somSelf,ev,buf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somrGetState
  #ifdef parent_somrGetState
    #define SOMGD_pmc_parent_somrGetState
    #undef parent_somrGetState
  #else
#define parent_somrGetState Day_parent_SOMRReplicbl_somrGetState
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMRReplicbl_somrGetState
  #ifdef parent_SOMRReplicbl_somrGetState
    #define SOMGD_pmc_parent_SOMRReplicbl_somrGetState
    #undef parent_SOMRReplicbl_somrGetState
  #else
    #define parent_SOMRReplicbl_somrGetState Day_parent_SOMRReplicbl_somrGetState
  #endif
#endif
#define Day_parents_somrGetState(arg0,arg1) \
  (void) Day_parent_SOMRReplicbl_somrGetState(arg0,arg1);

/*
 * Overridden method: somrSetState
 */
SOM_Scope void  SOMLINK somrSetState(Day *somSelf, Environment *ev,
		string buf);
#ifndef somMN_somrSetState_defined
#define somMN_somrSetState_defined
static char *somMN_somrSetState = "somrSetState";
static somId somId_somrSetState = &somMN_somrSetState;
#endif  /* somMN_somrSetState_defined */
typedef void   (* SOMLINK somTD_xih_Day_somrSetState)(Day *somSelf, Environment *ev,
		string buf);
/* define the parent method call macro */
#define Day_parent_SOMRReplicbl_somrSetState(somSelf,ev,buf) \
  ((( somTD_xih_Day_somrSetState ) \
	somParentNumResolve(DayCClassData.parentMtab, 1, SOMRLinearizableClassData.somrSetState)) \
	 (somSelf,ev,buf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somrSetState
  #ifdef parent_somrSetState
    #define SOMGD_pmc_parent_somrSetState
    #undef parent_somrSetState
  #else
#define parent_somrSetState Day_parent_SOMRReplicbl_somrSetState
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMRReplicbl_somrSetState
  #ifdef parent_SOMRReplicbl_somrSetState
    #define SOMGD_pmc_parent_SOMRReplicbl_somrSetState
    #undef parent_SOMRReplicbl_somrSetState
  #else
    #define parent_SOMRReplicbl_somrSetState Day_parent_SOMRReplicbl_somrSetState
  #endif
#endif
#define Day_parents_somrSetState(arg0,arg1) \
  (void) Day_parent_SOMRReplicbl_somrSetState(arg0,arg1);

/*
 * Overridden method: somrDoDirective
 */
SOM_Scope void  SOMLINK somrDoDirective(Day *somSelf, Environment *ev,
		string str);
#ifndef somMN_somrDoDirective_defined
#define somMN_somrDoDirective_defined
static char *somMN_somrDoDirective = "somrDoDirective";
static somId somId_somrDoDirective = &somMN_somrDoDirective;
#endif  /* somMN_somrDoDirective_defined */
typedef void   (* SOMLINK somTD_xih_Day_somrDoDirective)(Day *somSelf, Environment *ev,
		string str);
/* define the parent method call macro */
#define Day_parent_SOMRReplicbl_somrDoDirective(somSelf,ev,str) \
  ((( somTD_xih_Day_somrDoDirective ) \
	somParentNumResolve(DayCClassData.parentMtab, 1, SOMRReplicblClassData.somrDoDirective)) \
	 (somSelf,ev,str))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somrDoDirective
  #ifdef parent_somrDoDirective
    #define SOMGD_pmc_parent_somrDoDirective
    #undef parent_somrDoDirective
  #else
#define parent_somrDoDirective Day_parent_SOMRReplicbl_somrDoDirective
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMRReplicbl_somrDoDirective
  #ifdef parent_SOMRReplicbl_somrDoDirective
    #define SOMGD_pmc_parent_SOMRReplicbl_somrDoDirective
    #undef parent_SOMRReplicbl_somrDoDirective
  #else
    #define parent_SOMRReplicbl_somrDoDirective Day_parent_SOMRReplicbl_somrDoDirective
  #endif
#endif
#define Day_parents_somrDoDirective(arg0,arg1) \
  (void) Day_parent_SOMRReplicbl_somrDoDirective(arg0,arg1);

/*
 * -- Routines and Structures to create the class object
 */

/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t DaySM[] = {
    {    &DayClassData._get_date,
         &somId__get_date,
         &somDI__get_date,
         (somMethodProc *) _get_date,
         (somMethodProc *)((void*)-1),
#ifdef _get_date_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_dateStubs) },
#endif
    {    &DayClassData._set_date,
         &somId__set_date,
         &somDI__set_date,
         (somMethodProc *) _set_date,
         (somMethodProc *)((void*)-1),
#ifdef _set_date_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_set_dateStubs) },
#endif
    {    &DayClassData._get_workList,
         &somId__get_workList,
         &somDI__get_workList,
         (somMethodProc *) _get_workList,
         (somMethodProc *)((void*)-1),
#ifdef _get_workList_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_workListStubs) },
#endif
    {    &DayClassData._set_workList,
         &somId__set_workList,
         &somDI__set_workList,
         (somMethodProc *) _set_workList,
         (somMethodProc *)((void*)-1),
#ifdef _set_workList_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_set_workListStubs) },
#endif
    {    &DayClassData.book2,
         &somId_book2,
         &somDI_book2,
         (somMethodProc *) book2,
         (somMethodProc *)((void*)-1),
#ifdef book2_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &book2Stubs) },
#endif
    {    &DayClassData.removeItem,
         &somId_removeItem,
         &somDI_removeItem,
         (somMethodProc *) removeItem,
         (somMethodProc *)((void*)-1),
#ifdef removeItem_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &removeItemStubs) },
#endif
    {    &DayClassData.initReplica,
         &somId_initReplica,
         &somDI_initReplica,
         (somMethodProc *) initReplica,
         (somMethodProc *)((void*)-1),
#ifdef initReplica_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &initReplicaStubs) },
#endif
    {    &DayClassData.registerView,
         &somId_registerView,
         &somDI_registerView,
         (somMethodProc *) registerView,
         (somMethodProc *)((void*)-1),
#ifdef registerView_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &registerViewStubs) },
#endif
    {    &DayClassData.notifyView,
         &somId_notifyView,
         &somDI_notifyView,
         (somMethodProc *) notifyView,
         (somMethodProc *)((void*)-1),
#ifdef notifyView_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &notifyViewStubs) },
#endif
    {    &DayClassData.getViewObject,
         &somId_getViewObject,
         &somDI_getViewObject,
         (somMethodProc *) getViewObject,
         (somMethodProc *)((void*)-1),
#ifdef getViewObject_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &getViewObjectStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t DayOM[] = {
    {    &somId_somInit,
         (somMethodProc *) ((somTD_xih_Day_somInit)somInit)    },
    {    &somId_somUninit,
         (somMethodProc *) ((somTD_xih_Day_somUninit)somUninit)    },
    {    &somId_somrGetState,
         (somMethodProc *) ((somTD_xih_Day_somrGetState)somrGetState)    },
    {    &somId_somrSetState,
         (somMethodProc *) ((somTD_xih_Day_somrSetState)somrSetState)    },
    {    &somId_somrDoDirective,
         (somMethodProc *) ((somTD_xih_Day_somrDoDirective)somrDoDirective)    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_Day = "Day";
static char * somPCN_Day_SOMRReplicbl = "SOMRReplicbl";

static somId somPCDay[] = {
    &somPCN_Day_SOMRReplicbl,
};

static somStaticClassInfo DaySCI = {
    3, 10, 5, 0, 0, 0,
    Day_MajorVersion, Day_MinorVersion,
    sizeof(DayData), Day_MaxNoMethods, 1,
    &somCN_Day,
    (somId) NULL, 1,
    somPCDay,
    (somClassDataStructure *) &DayClassData,
    (somCClassDataStructure *) &DayCClassData,
    DaySM, DayOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    0, /* old style class, zero directinitclasses */
    0, /* no directinitclasses */
    0, /* number of general methods */
    0, /* no general methods */
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of releaseorder entries */
    0, /* no ReleaseOrder */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};



/* ---------------------------------- */
/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK DayNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMRReplicblNewClass(SOMRReplicbl_MajorVersion,SOMRReplicbl_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&DaySCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */
SOM_Scope long  SOMLINK _get_date(Day *somSelf, Environment *ev){
    DayData *somThis = DayGetData(somSelf);
    DayMethodDebug("Day","_get_date");
    SOM_IgnoreWarning(ev);

    return (somThis->date);
}
SOM_Scope void  SOMLINK _set_date(Day *somSelf, Environment *ev,
		long date){
    DayData *somThis = DayGetData(somSelf);
    DayMethodDebug("Day","_set_date");
    SOM_IgnoreWarning(ev);

    somThis->date = date;
}
SOM_Scope _IDL_SEQUENCE_WorkItem  SOMLINK _get_workList(Day *somSelf, Environment *ev){
    DayData *somThis = DayGetData(somSelf);
    DayMethodDebug("Day","_get_workList");
    SOM_IgnoreWarning(ev);

    return (somThis->workList);
}
SOM_Scope void  SOMLINK _set_workList(Day *somSelf, Environment *ev,
		_IDL_SEQUENCE_WorkItem* workList){
    DayData *somThis = DayGetData(somSelf);
    DayMethodDebug("Day","_set_workList");
    SOM_IgnoreWarning(ev);

    somThis->workList = *workList;
}

#endif /* Primary Implementation Support */

#endif       /* SOM_Day_xih */
