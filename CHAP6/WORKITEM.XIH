
/*
 * This file was generated by the SOM Compiler.
 * FileName: workitem.xih.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxih: 2.7
 */

#ifndef SOM_WorkItem_xih
#define SOM_WorkItem_xih

#include <somcls.xh>
#include <somcm.xh>

#ifndef SOM_WorkItem_xh
#include <workitem.xh>
#endif

/*
 * Set the scope of methods functions
 */
#ifndef SOM_Scope
#define SOM_Scope static
#endif

#define WorkItem_MaxNoMethods 7

/*
 * -- Instance Data
 */
typedef struct {
	string startTime;
	string endTime;
	string task;
} WorkItemData;

/*
 * -- Getdata Macro
 */
#define WorkItemGetData(somSelf) \
    ((WorkItemData *) \
        SOM_DataResolve(((SOMObject *)((void *)somSelf)), WorkItemCClassData.instanceDataToken))

/*
 * -- Instance Data Access Macros for use in Method Procedures
 */
#ifdef VARIABLE_MACROS
  #define _startTime (somThis->startTime)
  #define _endTime (somThis->endTime)
  #define _task (somThis->task)
#endif


/*
 * -- Primary Implementation File Support
 */
#if (defined(WorkItem_Class_Source) || defined(SOM_Module_workitem_Source))

/*
 * Trace/Debug macro
 */
#ifndef WorkItemMethodDebug
#define WorkItemMethodDebug(c,m) SOMMethodDebug(c,m)
#endif

/*
 * -- Method Macros for use in Method Procedures
 */
#ifdef METHOD_MACROS
  #define _sompInitNextAvail somSelf->sompInitNextAvail
  #define _sompInitNearObject somSelf->sompInitNearObject
  #define _sompInitGivenId somSelf->sompInitGivenId
  #define _sompGetPersistentId somSelf->sompGetPersistentId
  #define _sompGetPersistentIdString somSelf->sompGetPersistentIdString
  #define _sompSetEncoderDecoderName somSelf->sompSetEncoderDecoderName
  #define _sompGetEncoderDecoderName somSelf->sompGetEncoderDecoderName
  #define _sompEquals somSelf->sompEquals
  #define _sompPassivate somSelf->sompPassivate
  #define _sompActivated somSelf->sompActivated
  #define _sompGetRelativeIdString somSelf->sompGetRelativeIdString
  #define _sompInitIOGroup somSelf->sompInitIOGroup
  #define _sompSetDirty somSelf->sompSetDirty
  #define _sompIsDirty somSelf->sompIsDirty
  #define _sompGetDirty somSelf->sompGetDirty
  #define _sompMarkForCompaction somSelf->sompMarkForCompaction
  #define _sompSetState somSelf->sompSetState
  #define _sompCheckState somSelf->sompCheckState
  #define _sompClearState somSelf->sompClearState
  #define _sompGetEncoderDecoder somSelf->sompGetEncoderDecoder
  #define _sompFreeEncoderDecoder somSelf->sompFreeEncoderDecoder
  #define _sompGetIOGroup somSelf->sompGetIOGroup
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somFree somSelf->somFree
  #define _somDefaultInit somSelf->somDefaultInit
  #define _somDestruct somSelf->somDestruct
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _somGetClass somSelf->somGetClass
  #define _somGetClassName somSelf->somGetClassName
  #define _somGetSize somSelf->somGetSize
  #define _somIsA somSelf->somIsA
  #define _somIsInstanceOf somSelf->somIsInstanceOf
  #define _somRespondsTo somSelf->somRespondsTo
  #define _somComputeForwardVisitMask somSelf->somComputeForwardVisitMask
  #define _somComputeReverseVisitMask somSelf->somComputeReverseVisitMask
  #define _somDispatchV somSelf->somDispatchV
  #define _somDispatchL somSelf->somDispatchL
  #define _somDispatchA somSelf->somDispatchA
  #define _somDispatchD somSelf->somDispatchD
  #define _somDispatch somSelf->somDispatch
  #define _somClassDispatch somSelf->somClassDispatch
  #define _somCastObj somSelf->somCastObj
  #define _somResetObj somSelf->somResetObj
  #define _somPrintSelf somSelf->somPrintSelf
  #define _somDumpSelf somSelf->somDumpSelf
  #define _somDumpSelfInt somSelf->somDumpSelfInt
  #define __get_startTime somSelf->_get_startTime
  #define __set_startTime somSelf->_set_startTime
  #define __get_endTime somSelf->_get_endTime
  #define __set_endTime somSelf->_set_endTime
  #define __get_task somSelf->_get_task
  #define __set_task somSelf->_set_task
  #define _mkEntry somSelf->mkEntry
  #define _somInit somSelf->somInit
  #define _somUninit somSelf->somUninit
  #define _sompIsDirty somSelf->sompIsDirty
#endif


/*
 * -- The WorkItem ClassData Structure
 */
struct WorkItemClassDataStructure WorkItemClassData = {(SOMClass *) NULL};

/*
 * -- The auxiliary WorkItem ClassData structure
 */
struct WorkItemCClassDataStructure WorkItemCClassData = {(somMethodTabs) NULL};


/*
 * New Method: _get_startTime
 */
SOM_Scope string  SOMLINK _get_startTime(WorkItem *somSelf, Environment *ev);
#ifndef somMN__get_startTime_defined
#define somMN__get_startTime_defined
static char *somMN__get_startTime = "_get_startTime";
static somId somId__get_startTime = &somMN__get_startTime;
#endif  /* somMN__get_startTime_defined */
#ifndef somDS__get_startTime_defined
#define somDS__get_startTime_defined
static char *somDS__get_startTime = "::WorkItem::startTime";
static somId somDI__get_startTime = &somDS__get_startTime;
#endif  /* somDS__get_startTime_defined */
#define _get_startTime_somApRdDefault

/*
 * New Method: _set_startTime
 */
SOM_Scope void  SOMLINK _set_startTime(WorkItem *somSelf, Environment *ev,
		string startTime);
#ifndef somMN__set_startTime_defined
#define somMN__set_startTime_defined
static char *somMN__set_startTime = "_set_startTime";
static somId somId__set_startTime = &somMN__set_startTime;
#endif  /* somMN__set_startTime_defined */
#ifndef somDS__set_startTime_defined
#define somDS__set_startTime_defined
static char *somDS__set_startTime = "::WorkItem::startTime";
static somId somDI__set_startTime = &somDS__set_startTime;
#endif  /* somDS__set_startTime_defined */
#define _set_startTime_somApRdDefault

/*
 * New Method: _get_endTime
 */
SOM_Scope string  SOMLINK _get_endTime(WorkItem *somSelf, Environment *ev);
#ifndef somMN__get_endTime_defined
#define somMN__get_endTime_defined
static char *somMN__get_endTime = "_get_endTime";
static somId somId__get_endTime = &somMN__get_endTime;
#endif  /* somMN__get_endTime_defined */
#ifndef somDS__get_endTime_defined
#define somDS__get_endTime_defined
static char *somDS__get_endTime = "::WorkItem::endTime";
static somId somDI__get_endTime = &somDS__get_endTime;
#endif  /* somDS__get_endTime_defined */
#define _get_endTime_somApRdDefault

/*
 * New Method: _set_endTime
 */
SOM_Scope void  SOMLINK _set_endTime(WorkItem *somSelf, Environment *ev,
		string endTime);
#ifndef somMN__set_endTime_defined
#define somMN__set_endTime_defined
static char *somMN__set_endTime = "_set_endTime";
static somId somId__set_endTime = &somMN__set_endTime;
#endif  /* somMN__set_endTime_defined */
#ifndef somDS__set_endTime_defined
#define somDS__set_endTime_defined
static char *somDS__set_endTime = "::WorkItem::endTime";
static somId somDI__set_endTime = &somDS__set_endTime;
#endif  /* somDS__set_endTime_defined */
#define _set_endTime_somApRdDefault

/*
 * New Method: _get_task
 */
SOM_Scope string  SOMLINK _get_task(WorkItem *somSelf, Environment *ev);
#ifndef somMN__get_task_defined
#define somMN__get_task_defined
static char *somMN__get_task = "_get_task";
static somId somId__get_task = &somMN__get_task;
#endif  /* somMN__get_task_defined */
#ifndef somDS__get_task_defined
#define somDS__get_task_defined
static char *somDS__get_task = "::WorkItem::task";
static somId somDI__get_task = &somDS__get_task;
#endif  /* somDS__get_task_defined */
#define _get_task_somApRdDefault

/*
 * New Method: _set_task
 */
SOM_Scope void  SOMLINK _set_task(WorkItem *somSelf, Environment *ev,
		string task);
#ifndef somMN__set_task_defined
#define somMN__set_task_defined
static char *somMN__set_task = "_set_task";
static somId somId__set_task = &somMN__set_task;
#endif  /* somMN__set_task_defined */
#ifndef somDS__set_task_defined
#define somDS__set_task_defined
static char *somDS__set_task = "::WorkItem::task";
static somId somDI__set_task = &somDS__set_task;
#endif  /* somDS__set_task_defined */
#define _set_task_somApRdDefault

/*
 * New Method: mkEntry
 */
SOM_Scope void  SOMLINK mkEntry(WorkItem *somSelf, Environment *ev,
		string sTime,
		string eTime,
		string taskDesc);
#ifndef somMN_mkEntry_defined
#define somMN_mkEntry_defined
static char *somMN_mkEntry = "mkEntry";
static somId somId_mkEntry = &somMN_mkEntry;
#endif  /* somMN_mkEntry_defined */
#ifndef somDS_mkEntry_defined
#define somDS_mkEntry_defined
static char *somDS_mkEntry = "::WorkItem::mkEntry";
static somId somDI_mkEntry = &somDS_mkEntry;
#endif  /* somDS_mkEntry_defined */
#define mkEntry_somApRdDefault

/*
 * Overridden method: somInit
 */
SOM_Scope void  SOMLINK somInit(WorkItem *somSelf);
#ifndef somMN_somInit_defined
#define somMN_somInit_defined
static char *somMN_somInit = "somInit";
static somId somId_somInit = &somMN_somInit;
#endif  /* somMN_somInit_defined */
typedef void   (* SOMLINK somTD_xih_WorkItem_somInit)(WorkItem *somSelf);
/* define the parent method call macro */
#define WorkItem_parent_SOMPPersistentObject_somInit(somSelf) \
  ((( somTD_xih_WorkItem_somInit ) \
	somParentNumResolve(WorkItemCClassData.parentMtab, 1, SOMObjectClassData.somInit)) \
	 (somSelf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somInit
  #ifdef parent_somInit
    #define SOMGD_pmc_parent_somInit
    #undef parent_somInit
  #else
#define parent_somInit WorkItem_parent_SOMPPersistentObject_somInit
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMPPersistentObject_somInit
  #ifdef parent_SOMPPersistentObject_somInit
    #define SOMGD_pmc_parent_SOMPPersistentObject_somInit
    #undef parent_SOMPPersistentObject_somInit
  #else
    #define parent_SOMPPersistentObject_somInit WorkItem_parent_SOMPPersistentObject_somInit
  #endif
#endif
#define WorkItem_parents_somInit(arg0) \
  (void) WorkItem_parent_SOMPPersistentObject_somInit(arg0);

/*
 * Overridden method: somUninit
 */
SOM_Scope void  SOMLINK somUninit(WorkItem *somSelf);
#ifndef somMN_somUninit_defined
#define somMN_somUninit_defined
static char *somMN_somUninit = "somUninit";
static somId somId_somUninit = &somMN_somUninit;
#endif  /* somMN_somUninit_defined */
typedef void   (* SOMLINK somTD_xih_WorkItem_somUninit)(WorkItem *somSelf);
/* define the parent method call macro */
#define WorkItem_parent_SOMPPersistentObject_somUninit(somSelf) \
  ((( somTD_xih_WorkItem_somUninit ) \
	somParentNumResolve(WorkItemCClassData.parentMtab, 1, SOMObjectClassData.somUninit)) \
	 (somSelf))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_somUninit
  #ifdef parent_somUninit
    #define SOMGD_pmc_parent_somUninit
    #undef parent_somUninit
  #else
#define parent_somUninit WorkItem_parent_SOMPPersistentObject_somUninit
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMPPersistentObject_somUninit
  #ifdef parent_SOMPPersistentObject_somUninit
    #define SOMGD_pmc_parent_SOMPPersistentObject_somUninit
    #undef parent_SOMPPersistentObject_somUninit
  #else
    #define parent_SOMPPersistentObject_somUninit WorkItem_parent_SOMPPersistentObject_somUninit
  #endif
#endif
#define WorkItem_parents_somUninit(arg0) \
  (void) WorkItem_parent_SOMPPersistentObject_somUninit(arg0);

/*
 * Overridden method: sompIsDirty
 */
SOM_Scope boolean  SOMLINK sompIsDirty(WorkItem *somSelf, Environment *ev);
#ifndef somMN_sompIsDirty_defined
#define somMN_sompIsDirty_defined
static char *somMN_sompIsDirty = "sompIsDirty";
static somId somId_sompIsDirty = &somMN_sompIsDirty;
#endif  /* somMN_sompIsDirty_defined */
typedef boolean   (* SOMLINK somTD_xih_WorkItem_sompIsDirty)(WorkItem *somSelf, Environment *ev);
/* define the parent method call macro */
#define WorkItem_parent_SOMPPersistentObject_sompIsDirty(somSelf,ev) \
  ((( somTD_xih_WorkItem_sompIsDirty ) \
	somParentNumResolve(WorkItemCClassData.parentMtab, 1, SOMPPersistentObjectClassData.sompIsDirty)) \
	 (somSelf,ev))
/* define a variety of (possibly ambiguous) short forms */
#ifndef SOMGD_pmc_parent_sompIsDirty
  #ifdef parent_sompIsDirty
    #define SOMGD_pmc_parent_sompIsDirty
    #undef parent_sompIsDirty
  #else
#define parent_sompIsDirty WorkItem_parent_SOMPPersistentObject_sompIsDirty
  #endif
#endif
#ifndef SOMGD_pmc_parent_SOMPPersistentObject_sompIsDirty
  #ifdef parent_SOMPPersistentObject_sompIsDirty
    #define SOMGD_pmc_parent_SOMPPersistentObject_sompIsDirty
    #undef parent_SOMPPersistentObject_sompIsDirty
  #else
    #define parent_SOMPPersistentObject_sompIsDirty WorkItem_parent_SOMPPersistentObject_sompIsDirty
  #endif
#endif
#define WorkItem_parents_sompIsDirty(arg0) \
  (void) WorkItem_parent_SOMPPersistentObject_sompIsDirty(arg0);

/*
 * -- Routines and Structures to create the class object
 */

/*
 * Declare the Static Methods table.
 */
static somStaticMethod_t WorkItemSM[] = {
    {    &WorkItemClassData._get_startTime,
         &somId__get_startTime,
         &somDI__get_startTime,
         (somMethodProc *) _get_startTime,
         (somMethodProc *)((void*)-1),
#ifdef _get_startTime_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_startTimeStubs) },
#endif
    {    &WorkItemClassData._set_startTime,
         &somId__set_startTime,
         &somDI__set_startTime,
         (somMethodProc *) _set_startTime,
         (somMethodProc *)((void*)-1),
#ifdef _set_startTime_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_set_startTimeStubs) },
#endif
    {    &WorkItemClassData._get_endTime,
         &somId__get_endTime,
         &somDI__get_endTime,
         (somMethodProc *) _get_endTime,
         (somMethodProc *)((void*)-1),
#ifdef _get_endTime_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_endTimeStubs) },
#endif
    {    &WorkItemClassData._set_endTime,
         &somId__set_endTime,
         &somDI__set_endTime,
         (somMethodProc *) _set_endTime,
         (somMethodProc *)((void*)-1),
#ifdef _set_endTime_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_set_endTimeStubs) },
#endif
    {    &WorkItemClassData._get_task,
         &somId__get_task,
         &somDI__get_task,
         (somMethodProc *) _get_task,
         (somMethodProc *)((void*)-1),
#ifdef _get_task_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_get_taskStubs) },
#endif
    {    &WorkItemClassData._set_task,
         &somId__set_task,
         &somDI__set_task,
         (somMethodProc *) _set_task,
         (somMethodProc *)((void*)-1),
#ifdef _set_task_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &_set_taskStubs) },
#endif
    {    &WorkItemClassData.mkEntry,
         &somId_mkEntry,
         &somDI_mkEntry,
         (somMethodProc *) mkEntry,
         (somMethodProc *)((void*)-1),
#ifdef mkEntry_somApRdDefault
         0},
#else
         (somMethodProc *) ((void*) &mkEntryStubs) },
#endif
};


/*
 * Declare the Override Methods table.
 */
static somOverrideMethod_t WorkItemOM[] = {
    {    &somId_somInit,
         (somMethodProc *) ((somTD_xih_WorkItem_somInit)somInit)    },
    {    &somId_somUninit,
         (somMethodProc *) ((somTD_xih_WorkItem_somUninit)somUninit)    },
    {    &somId_sompIsDirty,
         (somMethodProc *) ((somTD_xih_WorkItem_sompIsDirty)sompIsDirty)    },
};


/*
 *  Initializers for class Ids
 */
static char * somCN_WorkItem = "WorkItem";
static char * somPCN_WorkItem_SOMPPersistentObject = "SOMPPersistentObject";

static somId somPCWorkItem[] = {
    &somPCN_WorkItem_SOMPPersistentObject,
};

static somStaticClassInfo WorkItemSCI = {
    3, 7, 3, 0, 0, 0,
    WorkItem_MajorVersion, WorkItem_MinorVersion,
    sizeof(WorkItemData), WorkItem_MaxNoMethods, 1,
    &somCN_WorkItem,
    (somId) NULL, 1,
    somPCWorkItem,
    (somClassDataStructure *) &WorkItemClassData,
    (somCClassDataStructure *) &WorkItemCClassData,
    WorkItemSM, WorkItemOM,
    (char *) NULL,
    (somNonInternalData_t *) NULL,  (somProcMethods_t *) NULL,
    (somVarargsFuncs_t *) NULL,
    (somTP_somClassInitFunc *) NULL,
    4, /* type code alignment */
    0, /* old style class, zero directinitclasses */
    0, /* no directinitclasses */
    0, /* number of general methods */
    0, /* no general methods */
    0, /* no public data offset */
    0, /* no sci development level check */
    0, /* number of SelectInheritedMethods */
    0, /* no SelectInheritedMethods */
    0, /* number of releaseorder entries */
    0, /* no ReleaseOrder */
    0, /* number of migrated methods */
    0, /* no migrated method implementations */
    0, /* number of initializers */
    0, /* no initializers */
    0, /* not a DTS class */
    0, /* no dynamically computed info */
};



/* ---------------------------------- */
/*
 * Class Creation and Initialization
 */

SOMClass * SOMLINK WorkItemNewClass (integer4 somtmajorVersion,
		integer4 somtminorVersion)
{
    SOMPPersistentObjectNewClass(SOMPPersistentObject_MajorVersion,SOMPPersistentObject_MinorVersion);	/* static reference */
    return (SOMClass*) ((void*)(somBuildClass(1,&WorkItemSCI, somtmajorVersion, somtminorVersion)));
}

/*
 * Functions for attributes.
 */
SOM_Scope string  SOMLINK _get_startTime(WorkItem *somSelf, Environment *ev){
    WorkItemData *somThis = WorkItemGetData(somSelf);
    WorkItemMethodDebug("WorkItem","_get_startTime");
    SOM_IgnoreWarning(ev);

    return (somThis->startTime);
}
SOM_Scope void  SOMLINK _set_startTime(WorkItem *somSelf, Environment *ev,
		string startTime){
    WorkItemData *somThis = WorkItemGetData(somSelf);
    WorkItemMethodDebug("WorkItem","_set_startTime");
    SOM_IgnoreWarning(ev);

    somThis->startTime = startTime;
}
SOM_Scope string  SOMLINK _get_endTime(WorkItem *somSelf, Environment *ev){
    WorkItemData *somThis = WorkItemGetData(somSelf);
    WorkItemMethodDebug("WorkItem","_get_endTime");
    SOM_IgnoreWarning(ev);

    return (somThis->endTime);
}
SOM_Scope void  SOMLINK _set_endTime(WorkItem *somSelf, Environment *ev,
		string endTime){
    WorkItemData *somThis = WorkItemGetData(somSelf);
    WorkItemMethodDebug("WorkItem","_set_endTime");
    SOM_IgnoreWarning(ev);

    somThis->endTime = endTime;
}
SOM_Scope string  SOMLINK _get_task(WorkItem *somSelf, Environment *ev){
    WorkItemData *somThis = WorkItemGetData(somSelf);
    WorkItemMethodDebug("WorkItem","_get_task");
    SOM_IgnoreWarning(ev);

    return (somThis->task);
}
SOM_Scope void  SOMLINK _set_task(WorkItem *somSelf, Environment *ev,
		string task){
    WorkItemData *somThis = WorkItemGetData(somSelf);
    WorkItemMethodDebug("WorkItem","_set_task");
    SOM_IgnoreWarning(ev);

    somThis->task = task;
}

#endif /* Primary Implementation Support */

#endif       /* SOM_WorkItem_xih */
