
/*
 * This file was generated by the SOM Compiler.
 * FileName: perserv.xh.
 * Generated using:
 *     SOM Precompiler somipc: 2.2
 *     SOM Emitter emitxh: 2.7
 */

#ifndef SOM_PersistentServer_xh
#define SOM_PersistentServer_xh

class PersistentServer;

#define PersistentServer_MajorVersion 0
#define PersistentServer_MinorVersion 0

/* C++ som defs */
#include <somcls.xh>

/* Include C++ parent defs */
#ifndef SOM_SOMDServer_xh
#include <somdserv.xh>
#endif

/*
 * Include the metaclass def
 */
#include <snglicls.xh>

#ifndef PersistentServer_API
#define PersistentServer_API
/*
 * -- The Class API
 */

/*
 * Start of user-defined types:
 */
class SOMDObject;

/*
 * End of user-defined types.
 */

/* A procedure to create the PersistentServer Class */
class SOMMSingleInstance;
SOMEXTERN SOMMSingleInstance * SOMLINK PersistentServerNewClass(
		integer4 majorVersion,
		integer4 minorVersion);

/* The API to the PersistentServer class object, and the methods it introduces. */
SOMEXTERN struct PersistentServerClassDataStructure {
	SOMMSingleInstance *classObject;
	somMToken getPerStorMgr;
	somMToken objectExists;
	somMToken restoreObjectFromId;
} PersistentServerClassData;
#define _PersistentServer PersistentServerClassData.classObject

/* The API to parentMtabs for PersistentServer, and the instance data it introduces. */
SOMEXTERN struct PersistentServerCClassDataStructure {
	somMethodTabs parentMtab;
	somDToken instanceDataToken;
} PersistentServerCClassData;

/*
 * -- Typedefs for Procedures that support Methods introduced by PersistentServer
 */
SOMEXTERN {
typedef SOMObject*   (* SOMLINK somTD_PersistentServer_getPerStorMgr)(PersistentServer *somSelf, Environment *ev);
typedef boolean   (* SOMLINK somTD_PersistentServer_objectExists)(PersistentServer *somSelf, Environment *ev,
		string id);
typedef SOMObject*   (* SOMLINK somTD_PersistentServer_restoreObjectFromId)(PersistentServer *somSelf, Environment *ev,
		string id);
}

#endif /* PersistentServer_API */


/*
 * -- Method Tokens are Thunks
 */
#undef somresolve_
#define somresolve_(obj,mToken) ((somMethodProc*)((void)obj, mToken))

/*
 * -- The C++ Wrapper Class for PersistentServer
 */
class PersistentServer : public SOMDServer
{
public:

void *operator new(size_t size)
{
   SOM_IgnoreWarning(size);
   if (!PersistentServerClassData.classObject) 
      PersistentServerNewClass(PersistentServer_MajorVersion,PersistentServer_MinorVersion);
   return (void *)
      ((somTD_SOMClass_somNew)
      somresolve_((SOMObject *)((void*)(PersistentServerClassData.classObject)),
                 SOMClassClassData.somNew))
         ((SOMClass *)((void*)(PersistentServerClassData.classObject)));
}

void operator delete(void * obj)
{
   if (obj) ((SOMObject *)obj)->somFree();
}

/* Override somGetClass for this class to specialize the return type. */
SOMMSingleInstance* somGetClass()
{
   return (SOMMSingleInstance *) ((void *)(SOMObject::somGetClass()));
}

/* public method: getPerStorMgr */
SOMObject*   getPerStorMgr(Environment *ev)
{
   return SOM_Resolve(this,PersistentServer,getPerStorMgr)
	(this,ev);
}


/* public method: objectExists */
boolean   objectExists(Environment *ev,
		string id)
{
   return SOM_Resolve(this,PersistentServer,objectExists)
	(this,ev,id);
}


/* public method: restoreObjectFromId */
SOMObject*   restoreObjectFromId(Environment *ev,
		string id)
{
   return SOM_Resolve(this,PersistentServer,restoreObjectFromId)
	(this,ev,id);
}



};   /* PersistentServer */



#endif       /* SOM_PersistentServer_xh */
